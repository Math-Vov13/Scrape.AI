{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/clement/Desktop/Github/Mistral-copie/src/lib/utils.ts"],"sourcesContent":["import { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,SAAS,GAAG,GAAG,MAAoB;IACxC,OAAO,CAAA,GAAA,8JAAA,CAAA,UAAO,AAAD,EAAE,CAAA,GAAA,wIAAA,CAAA,OAAI,AAAD,EAAE;AACtB","debugId":null}},
    {"offset": {"line": 26, "column": 0}, "map": {"version":3,"sources":["file:///Users/clement/Desktop/Github/Mistral-copie/src/components/ui/avatar.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n"],"names":[],"mappings":";;;;;;AAEA;AACA;AAEA;AALA;;;;;AAOA,MAAM,uBAAS,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAG5B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC,qKAAA,CAAA,OAAoB;QACnB,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,iEACA;QAED,GAAG,KAAK;;;;;;;AAGb,OAAO,WAAW,GAAG,qKAAA,CAAA,OAAoB,CAAC,WAAW;AAErD,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC,qKAAA,CAAA,QAAqB;QACpB,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,+BAA+B;QAC5C,GAAG,KAAK;;;;;;;AAGb,YAAY,WAAW,GAAG,qKAAA,CAAA,QAAqB,CAAC,WAAW;AAE3D,MAAM,+BAAiB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGpC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC,qKAAA,CAAA,WAAwB;QACvB,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,wEACA;QAED,GAAG,KAAK;;;;;;;AAGb,eAAe,WAAW,GAAG,qKAAA,CAAA,WAAwB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 90, "column": 0}, "map": {"version":3,"sources":["file:///Users/clement/Desktop/Github/Mistral-copie/src/components/ui/button.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 rounded-md px-3 text-xs\",\n        lg: \"h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AAEA;;;;;;AAEA,MAAM,iBAAiB,CAAA,GAAA,mKAAA,CAAA,MAAG,AAAD,EACvB,ySACA;IACE,UAAU;QACR,SAAS;YACP,SACE;YACF,aACE;YACF,SACE;YACF,WACE;YACF,OAAO;YACP,MAAM;QACR;QACA,MAAM;YACJ,SAAS;YACT,IAAI;YACJ,IAAI;YACJ,MAAM;QACR;IACF;IACA,iBAAiB;QACf,SAAS;QACT,MAAM;IACR;AACF;AASF,MAAM,uBAAS,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAC5B,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,UAAU,KAAK,EAAE,GAAG,OAAO,EAAE;IACxD,MAAM,OAAO,UAAU,mKAAA,CAAA,OAAI,GAAG;IAC9B,qBACE,6LAAC;QACC,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,eAAe;YAAE;YAAS;YAAM;QAAU;QACxD,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;;AAEF,OAAO,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 157, "column": 0}, "map": {"version":3,"sources":["file:///Users/clement/Desktop/Github/Mistral-copie/src/components/TypeWriter.tsx"],"sourcesContent":["\"use client\";\n\nimport { useState, useEffect, useRef } from \"react\";\n\ninterface TypeWriterProps {\n  text: string;\n  delay?: number;\n  minDelay?: number;\n  maxDelay?: number;\n  onComplete?: () => void;\n}\n\nexport default function TypeWriter({ \n  text, \n  delay = 0, \n  minDelay = 15,\n  maxDelay = 35,\n  onComplete \n}: TypeWriterProps) {\n  const [displayedText, setDisplayedText] = useState(\"\");\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const isCompleted = useRef(false);\n\n  useEffect(() => {\n    // Reset when text changes\n    setDisplayedText(\"\");\n    setCurrentIndex(0);\n    isCompleted.current = false;\n  }, [text]);\n\n  useEffect(() => {\n    if (currentIndex < text.length) {\n      // Calculate dynamic delay\n      let currentDelay = delay;\n      \n      // If no fixed delay is provided, use random delay within range\n      if (delay === 0) {\n        // Add longer pauses at periods, commas, and sentence endings\n        if (currentIndex > 0 && ['.', '!', '?'].includes(text[currentIndex - 1]) && text[currentIndex] === ' ') {\n          currentDelay = 300; // Pause longer at end of sentences\n        } else if (currentIndex > 0 && [',', ';', ':'].includes(text[currentIndex - 1])) {\n          currentDelay = 150; // Pause a bit at commas and other punctuation\n        } else {\n          // Random typing speed for natural effect\n          currentDelay = Math.floor(Math.random() * (maxDelay - minDelay + 1) + minDelay);\n        }\n      }\n      \n      const timeout = setTimeout(() => {\n        setDisplayedText(prev => prev + text[currentIndex]);\n        setCurrentIndex(prevIndex => prevIndex + 1);\n      }, currentDelay);\n      \n      return () => clearTimeout(timeout);\n    } else if (!isCompleted.current) {\n      isCompleted.current = true;\n      onComplete?.();\n    }\n  }, [currentIndex, delay, minDelay, maxDelay, text, onComplete]);\n\n  return <>{displayedText}</>;\n}\n"],"names":[],"mappings":";;;;AAEA;;;AAFA;;AAYe,SAAS,WAAW,EACjC,IAAI,EACJ,QAAQ,CAAC,EACT,WAAW,EAAE,EACb,WAAW,EAAE,EACb,UAAU,EACM;;IAChB,MAAM,CAAC,eAAe,iBAAiB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACnD,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACjD,MAAM,cAAc,CAAA,GAAA,6JAAA,CAAA,SAAM,AAAD,EAAE;IAE3B,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;gCAAE;YACR,0BAA0B;YAC1B,iBAAiB;YACjB,gBAAgB;YAChB,YAAY,OAAO,GAAG;QACxB;+BAAG;QAAC;KAAK;IAET,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;gCAAE;YACR,IAAI,eAAe,KAAK,MAAM,EAAE;gBAC9B,0BAA0B;gBAC1B,IAAI,eAAe;gBAEnB,+DAA+D;gBAC/D,IAAI,UAAU,GAAG;oBACf,6DAA6D;oBAC7D,IAAI,eAAe,KAAK;wBAAC;wBAAK;wBAAK;qBAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,eAAe,EAAE,KAAK,IAAI,CAAC,aAAa,KAAK,KAAK;wBACtG,eAAe,KAAK,mCAAmC;oBACzD,OAAO,IAAI,eAAe,KAAK;wBAAC;wBAAK;wBAAK;qBAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,eAAe,EAAE,GAAG;wBAC/E,eAAe,KAAK,8CAA8C;oBACpE,OAAO;wBACL,yCAAyC;wBACzC,eAAe,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,CAAC,WAAW,WAAW,CAAC,IAAI;oBACxE;gBACF;gBAEA,MAAM,UAAU;oDAAW;wBACzB;4DAAiB,CAAA,OAAQ,OAAO,IAAI,CAAC,aAAa;;wBAClD;4DAAgB,CAAA,YAAa,YAAY;;oBAC3C;mDAAG;gBAEH;4CAAO,IAAM,aAAa;;YAC5B,OAAO,IAAI,CAAC,YAAY,OAAO,EAAE;gBAC/B,YAAY,OAAO,GAAG;gBACtB;YACF;QACF;+BAAG;QAAC;QAAc;QAAO;QAAU;QAAU;QAAM;KAAW;IAE9D,qBAAO;kBAAG;;AACZ;GAjDwB;KAAA","debugId":null}},
    {"offset": {"line": 249, "column": 0}, "map": {"version":3,"sources":["file:///Users/clement/Desktop/Github/Mistral-copie/src/lib/demoResponses.ts"],"sourcesContent":["// Sample AI responses for demonstration\nexport const demoResponses = [\n  \"Hello! I'm a chat assistant. How can I help you today?\",\n  \"That's a great question. Let me provide a detailed answer. The key aspect to consider is that progressive text streaming gives users immediate feedback that their request is being processed, rather than making them wait for the complete response to appear all at once.\",\n  \"I'd be happy to help with that. Streaming text, like you're seeing right now, creates a more engaging conversation experience because it mimics how humans communicate - we don't deliver our thoughts all at once, but rather word by word.\",\n  \"Looking at your code, I can see several ways we could optimize it. First, we should consider the performance implications. Second, let's think about user experience and accessibility. And third, we need to ensure our implementation is maintainable for future developers.\",\n  \"In summary, text streaming creates a more dynamic and interactive feel to conversations with AI assistants. It helps users feel more engaged as they can start processing the response while it's still being generated, rather than waiting for a complete answer to appear all at once.\"\n];\n"],"names":[],"mappings":"AAAA,wCAAwC;;;;AACjC,MAAM,gBAAgB;IAC3B;IACA;IACA;IACA;IACA;CACD","debugId":null}},
    {"offset": {"line": 269, "column": 0}, "map": {"version":3,"sources":["file:///Users/clement/Desktop/Github/Mistral-copie/src/app/page.tsx"],"sourcesContent":["\"use client\";\n\nimport { useState, useRef, useEffect } from \"react\";\nimport { Avatar } from \"@/components/ui/avatar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { ThumbsUp, ThumbsDown, RefreshCw, Copy, Plus, Send, Star, Settings } from \"lucide-react\";\nimport TypeWriter from \"@/components/TypeWriter\";\nimport { demoResponses } from \"@/lib/demoResponses\";\n\ninterface Message {\n  id: string;\n  content: string;\n  isUser: boolean;\n  timestamp: string;\n  isStreaming?: boolean;\n}\n\nexport default function Home() {\n  const [messages, setMessages] = useState<Message[]>([\n    {\n      id: \"1\",\n      content: \"Hello! How can I assist you today?\",\n      isUser: false,\n      timestamp: \"16:58\",\n    },\n  ]);\n  const [responseIndex, setResponseIndex] = useState(0);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [isTyping, setIsTyping] = useState(false);\n  const [isWaitingResponse, setIsWaitingResponse] = useState(false);\n  const chatContainerRef = useRef<HTMLDivElement>(null);\n  const inputRef = useRef<HTMLTextAreaElement>(null);\n  const initialInputHeight = useRef<number>(0);\n  const isBlocking = isWaitingResponse; // block send until AI finishes\n\n  // Auto-scroll to bottom when messages change\n  useEffect(() => {\n    if (chatContainerRef.current) {\n      chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\n    }\n  }, [messages]);\n\n  // Auto-focus the input on mount\n  useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.focus();\n      // record initial one-line height\n      initialInputHeight.current = inputRef.current.clientHeight;\n    }\n  }, []);\n\n  const handleSendMessage = () => {\n    if (!inputValue.trim() || isBlocking) return;\n\n    const newMessage: Message = {\n      id: Date.now().toString(),\n      content: inputValue,\n      isUser: true,\n      timestamp: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),\n    };\n\n    setMessages((prev) => [...prev, newMessage]);\n    setInputValue(\"\");\n    // After clearing, focus back on the textarea\n    inputRef.current?.focus();\n    // Reset textarea height (auto will fallback to rows=1 height)\n    if (inputRef.current) inputRef.current.style.height = 'auto';\n    setIsTyping(true);\n    setIsWaitingResponse(true);\n\n    setTimeout(() => {\n      const responseContent = demoResponses[responseIndex % demoResponses.length];\n      setResponseIndex(prevIndex => prevIndex + 1);\n      \n      const aiResponse: Message = {\n        id: (Date.now() + 1).toString(),\n        content: responseContent,\n        isUser: false,\n        timestamp: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),\n        isStreaming: true,\n      };\n\n      setMessages((prev) => [...prev, aiResponse]);\n      setIsTyping(false);\n    }, 1500);\n  };\n\n  return (\n    <div className=\"flex flex-col h-screen bg-background relative\">\n       {/* Admin button */}\n       <header className=\"p-4 flex items-center border-b border-border\">\n        <div className=\"flex space-x-2\">\n          <button className=\"p-2 hover:bg-secondary rounded-full\">\n            <Plus className=\"h-5 w-5\" />\n          </button>\n          <button className=\"p-2 hover:bg-secondary rounded-full\">\n            <Star className=\"h-5 w-5\" />\n          </button>\n        </div>\n        \n        <button className=\"ml-auto p-2 hover:bg-secondary rounded-full\">\n          <Settings className=\"h-5 w-5\" />\n        </button>\n      </header>\n\n      {/* Chat container */}\n      <div\n        ref={chatContainerRef}\n        className=\"flex-1 overflow-auto p-4 space-y-6\"\n      >\n        {messages.map((message) => (\n          <div key={message.id} className={`flex ${message.isUser ? 'justify-end' : 'justify-start'}`}>\n            <div className={`${message.isUser ? 'chat-message-user' : 'chat-message-ai'}`}>\n              {!message.isUser && (\n                <div className=\"flex-shrink-0\">\n                  <Avatar className=\"h-8 w-8 bg-primary text-primary-foreground\" />\n                </div>\n              )}\n              <div className=\"flex flex-col\">\n                <div className={`text-sm ${!message.isUser && message.isStreaming ? 'streaming-cursor' : ''}`}>\n                  {!message.isUser && message.isStreaming ? (\n                    <TypeWriter \n                      text={message.content} \n                      onComplete={() => {\n                        setMessages(prevMessages => \n                          prevMessages.map(msg => \n                            msg.id === message.id \n                              ? { ...msg, isStreaming: false } \n                              : msg\n                          )\n                        );\n                        setIsWaitingResponse(false);\n                      }} \n                    />\n                  ) : (\n                    message.content\n                  )}\n                </div>\n               </div>\n             </div>\n           </div>\n         ))}\n\n         {isTyping && (\n           <div className=\"flex justify-start\">\n            <div className=\"chat-message-ai items-center\">\n               <Avatar className=\"h-8 w-8 bg-primary text-primary-foreground\">\n              </Avatar>\n               <div className=\"flex items-center space-x-1\">\n                 <div className=\"h-2 w-2 bg-foreground/70 rounded-full animate-pulse\"></div>\n                 <div className=\"h-2 w-2 bg-foreground/70 rounded-full animate-pulse delay-150\"></div>\n                 <div className=\"h-2 w-2 bg-foreground/70 rounded-full animate-pulse delay-300\"></div>\n               </div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Input area */}\n      <div className=\"p-4 border-t border-border\">\n        <div className=\"flex items-start space-x-2 max-w-3xl mx-auto\">\n          <textarea\n            ref={inputRef}\n            rows={1}\n            value={inputValue}\n            onChange={(e) => setInputValue(e.target.value)}\n            onKeyDown={(e) => e.key === 'Enter' && e.shiftKey && (e.preventDefault(), handleSendMessage())}\n            placeholder=\"Posez une question...\"\n            className=\"chat-input resize-none\"\n            onInput={(e) => {\n              const ta = e.currentTarget;\n              // resize but never below initial one-line height\n              ta.style.height = 'auto';\n              const minH = initialInputHeight.current;\n              const newH = Math.max(ta.scrollHeight, minH);\n              ta.style.height = `${newH}px`;\n            }}\n            style={{ maxHeight: '7.5rem', overflowY: 'auto' }}\n          />\n          <Button\n            onClick={handleSendMessage}\n            disabled={!inputValue.trim() || isBlocking}\n            className=\"rounded-full p-2 h-10 w-10 flex items-center justify-center\"\n            variant={inputValue.trim() && !isBlocking ? \"default\" : \"secondary\"}\n          >\n            <Send className=\"h-5 w-5\" />\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}