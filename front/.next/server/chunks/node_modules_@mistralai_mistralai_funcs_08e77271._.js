module.exports = {

"[project]/node_modules/@mistralai/mistralai/funcs/agentsComplete.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */ var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.agentsComplete = agentsComplete;
const encodings_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/encodings.js [app-route] (ecmascript)");
const M = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/matchers.js [app-route] (ecmascript)"));
const primitives_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/primitives.js [app-route] (ecmascript)");
const schemas_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/schemas.js [app-route] (ecmascript)");
const security_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/security.js [app-route] (ecmascript)");
const url_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/url.js [app-route] (ecmascript)");
const components = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/components/index.js [app-route] (ecmascript)"));
const errors = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/errors/index.js [app-route] (ecmascript)"));
const async_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/types/async.js [app-route] (ecmascript)");
/**
 * Agents Completion
 */ function agentsComplete(client, request, options) {
    return new async_js_1.APIPromise($do(client, request, options));
}
async function $do(client, request, options) {
    const parsed = (0, schemas_js_1.safeParse)(request, (value)=>components.AgentsCompletionRequest$outboundSchema.parse(value), "Input validation failed");
    if (!parsed.ok) {
        return [
            parsed,
            {
                status: "invalid"
            }
        ];
    }
    const payload = parsed.value;
    const body = (0, encodings_js_1.encodeJSON)("body", payload, {
        explode: true
    });
    const path = (0, url_js_1.pathToFunc)("/v1/agents/completions")();
    const headers = new Headers((0, primitives_js_1.compactMap)({
        "Content-Type": "application/json",
        Accept: "application/json"
    }));
    const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
    const securityInput = secConfig == null ? {} : {
        apiKey: secConfig
    };
    const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
    const context = {
        baseURL: options?.serverURL ?? client._baseURL ?? "",
        operationID: "agents_completion_v1_agents_completions_post",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: options?.retries || client._options.retryConfig || {
            strategy: "none"
        },
        retryCodes: options?.retryCodes || [
            "429",
            "500",
            "502",
            "503",
            "504"
        ]
    };
    const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "POST",
        baseURL: options?.serverURL,
        path: path,
        headers: headers,
        body: body,
        timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1
    }, options);
    if (!requestRes.ok) {
        return [
            requestRes,
            {
                status: "invalid"
            }
        ];
    }
    const req = requestRes.value;
    const doResult = await client._do(req, {
        context,
        errorCodes: [
            "422",
            "4XX",
            "5XX"
        ],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
    });
    if (!doResult.ok) {
        return [
            doResult,
            {
                status: "request-error",
                request: req
            }
        ];
    }
    const response = doResult.value;
    const responseFields = {
        HttpMeta: {
            Response: response,
            Request: req
        }
    };
    const [result] = await M.match(M.json(200, components.ChatCompletionResponse$inboundSchema), M.jsonErr(422, errors.HTTPValidationError$inboundSchema), M.fail("4XX"), M.fail("5XX"))(response, {
        extraFields: responseFields
    });
    if (!result.ok) {
        return [
            result,
            {
                status: "complete",
                request: req,
                response
            }
        ];
    }
    return [
        result,
        {
            status: "complete",
            request: req,
            response
        }
    ];
} //# sourceMappingURL=agentsComplete.js.map
}}),
"[project]/node_modules/@mistralai/mistralai/funcs/agentsStream.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */ var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.agentsStream = agentsStream;
const z = __importStar(__turbopack_context__.r("[project]/node_modules/zod/dist/cjs/index.js [app-route] (ecmascript)"));
const encodings_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/encodings.js [app-route] (ecmascript)");
const event_streams_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/event-streams.js [app-route] (ecmascript)");
const M = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/matchers.js [app-route] (ecmascript)"));
const primitives_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/primitives.js [app-route] (ecmascript)");
const schemas_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/schemas.js [app-route] (ecmascript)");
const security_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/security.js [app-route] (ecmascript)");
const url_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/url.js [app-route] (ecmascript)");
const components = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/components/index.js [app-route] (ecmascript)"));
const errors = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/errors/index.js [app-route] (ecmascript)"));
const async_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/types/async.js [app-route] (ecmascript)");
/**
 * Stream Agents completion
 *
 * @remarks
 * Mistral AI provides the ability to stream responses back to a client in order to allow partial results for certain requests. Tokens will be sent as data-only server-sent events as they become available, with the stream terminated by a data: [DONE] message. Otherwise, the server will hold the request open until the timeout or until completion, with the response containing the full result as JSON.
 */ function agentsStream(client, request, options) {
    return new async_js_1.APIPromise($do(client, request, options));
}
async function $do(client, request, options) {
    const parsed = (0, schemas_js_1.safeParse)(request, (value)=>components.AgentsCompletionStreamRequest$outboundSchema.parse(value), "Input validation failed");
    if (!parsed.ok) {
        return [
            parsed,
            {
                status: "invalid"
            }
        ];
    }
    const payload = parsed.value;
    const body = (0, encodings_js_1.encodeJSON)("body", payload, {
        explode: true
    });
    const path = (0, url_js_1.pathToFunc)("/v1/agents/completions#stream")();
    const headers = new Headers((0, primitives_js_1.compactMap)({
        "Content-Type": "application/json",
        Accept: "text/event-stream"
    }));
    const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
    const securityInput = secConfig == null ? {} : {
        apiKey: secConfig
    };
    const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
    const context = {
        baseURL: options?.serverURL ?? client._baseURL ?? "",
        operationID: "stream_agents",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: options?.retries || client._options.retryConfig || {
            strategy: "none"
        },
        retryCodes: options?.retryCodes || [
            "429",
            "500",
            "502",
            "503",
            "504"
        ]
    };
    const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "POST",
        baseURL: options?.serverURL,
        path: path,
        headers: headers,
        body: body,
        timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1
    }, options);
    if (!requestRes.ok) {
        return [
            requestRes,
            {
                status: "invalid"
            }
        ];
    }
    const req = requestRes.value;
    const doResult = await client._do(req, {
        context,
        errorCodes: [
            "422",
            "4XX",
            "5XX"
        ],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
    });
    if (!doResult.ok) {
        return [
            doResult,
            {
                status: "request-error",
                request: req
            }
        ];
    }
    const response = doResult.value;
    const responseFields = {
        HttpMeta: {
            Response: response,
            Request: req
        }
    };
    const [result] = await M.match(M.sse(200, z.instanceof(ReadableStream).transform((stream)=>{
        return new event_streams_js_1.EventStream({
            stream,
            decoder (rawEvent) {
                const schema = components.CompletionEvent$inboundSchema;
                return schema.parse(rawEvent);
            }
        });
    }), {
        sseSentinel: "[DONE]"
    }), M.jsonErr(422, errors.HTTPValidationError$inboundSchema), M.fail("4XX"), M.fail("5XX"))(response, {
        extraFields: responseFields
    });
    if (!result.ok) {
        return [
            result,
            {
                status: "complete",
                request: req,
                response
            }
        ];
    }
    return [
        result,
        {
            status: "complete",
            request: req,
            response
        }
    ];
} //# sourceMappingURL=agentsStream.js.map
}}),
"[project]/node_modules/@mistralai/mistralai/funcs/batchJobsCancel.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */ var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.batchJobsCancel = batchJobsCancel;
const encodings_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/encodings.js [app-route] (ecmascript)");
const M = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/matchers.js [app-route] (ecmascript)"));
const primitives_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/primitives.js [app-route] (ecmascript)");
const schemas_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/schemas.js [app-route] (ecmascript)");
const security_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/security.js [app-route] (ecmascript)");
const url_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/url.js [app-route] (ecmascript)");
const components = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/components/index.js [app-route] (ecmascript)"));
const operations = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/operations/index.js [app-route] (ecmascript)"));
const async_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/types/async.js [app-route] (ecmascript)");
/**
 * Cancel Batch Job
 *
 * @remarks
 * Request the cancellation of a batch job.
 */ function batchJobsCancel(client, request, options) {
    return new async_js_1.APIPromise($do(client, request, options));
}
async function $do(client, request, options) {
    const parsed = (0, schemas_js_1.safeParse)(request, (value)=>operations.JobsApiRoutesBatchCancelBatchJobRequest$outboundSchema.parse(value), "Input validation failed");
    if (!parsed.ok) {
        return [
            parsed,
            {
                status: "invalid"
            }
        ];
    }
    const payload = parsed.value;
    const body = null;
    const pathParams = {
        job_id: (0, encodings_js_1.encodeSimple)("job_id", payload.job_id, {
            explode: false,
            charEncoding: "percent"
        })
    };
    const path = (0, url_js_1.pathToFunc)("/v1/batch/jobs/{job_id}/cancel")(pathParams);
    const headers = new Headers((0, primitives_js_1.compactMap)({
        Accept: "application/json"
    }));
    const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
    const securityInput = secConfig == null ? {} : {
        apiKey: secConfig
    };
    const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
    const context = {
        baseURL: options?.serverURL ?? client._baseURL ?? "",
        operationID: "jobs_api_routes_batch_cancel_batch_job",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: options?.retries || client._options.retryConfig || {
            strategy: "none"
        },
        retryCodes: options?.retryCodes || [
            "429",
            "500",
            "502",
            "503",
            "504"
        ]
    };
    const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "POST",
        baseURL: options?.serverURL,
        path: path,
        headers: headers,
        body: body,
        timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1
    }, options);
    if (!requestRes.ok) {
        return [
            requestRes,
            {
                status: "invalid"
            }
        ];
    }
    const req = requestRes.value;
    const doResult = await client._do(req, {
        context,
        errorCodes: [
            "4XX",
            "5XX"
        ],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
    });
    if (!doResult.ok) {
        return [
            doResult,
            {
                status: "request-error",
                request: req
            }
        ];
    }
    const response = doResult.value;
    const [result] = await M.match(M.json(200, components.BatchJobOut$inboundSchema), M.fail("4XX"), M.fail("5XX"))(response);
    if (!result.ok) {
        return [
            result,
            {
                status: "complete",
                request: req,
                response
            }
        ];
    }
    return [
        result,
        {
            status: "complete",
            request: req,
            response
        }
    ];
} //# sourceMappingURL=batchJobsCancel.js.map
}}),
"[project]/node_modules/@mistralai/mistralai/funcs/batchJobsCreate.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */ var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.batchJobsCreate = batchJobsCreate;
const encodings_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/encodings.js [app-route] (ecmascript)");
const M = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/matchers.js [app-route] (ecmascript)"));
const primitives_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/primitives.js [app-route] (ecmascript)");
const schemas_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/schemas.js [app-route] (ecmascript)");
const security_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/security.js [app-route] (ecmascript)");
const url_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/url.js [app-route] (ecmascript)");
const components = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/components/index.js [app-route] (ecmascript)"));
const async_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/types/async.js [app-route] (ecmascript)");
/**
 * Create Batch Job
 *
 * @remarks
 * Create a new batch job, it will be queued for processing.
 */ function batchJobsCreate(client, request, options) {
    return new async_js_1.APIPromise($do(client, request, options));
}
async function $do(client, request, options) {
    const parsed = (0, schemas_js_1.safeParse)(request, (value)=>components.BatchJobIn$outboundSchema.parse(value), "Input validation failed");
    if (!parsed.ok) {
        return [
            parsed,
            {
                status: "invalid"
            }
        ];
    }
    const payload = parsed.value;
    const body = (0, encodings_js_1.encodeJSON)("body", payload, {
        explode: true
    });
    const path = (0, url_js_1.pathToFunc)("/v1/batch/jobs")();
    const headers = new Headers((0, primitives_js_1.compactMap)({
        "Content-Type": "application/json",
        Accept: "application/json"
    }));
    const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
    const securityInput = secConfig == null ? {} : {
        apiKey: secConfig
    };
    const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
    const context = {
        baseURL: options?.serverURL ?? client._baseURL ?? "",
        operationID: "jobs_api_routes_batch_create_batch_job",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: options?.retries || client._options.retryConfig || {
            strategy: "none"
        },
        retryCodes: options?.retryCodes || [
            "429",
            "500",
            "502",
            "503",
            "504"
        ]
    };
    const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "POST",
        baseURL: options?.serverURL,
        path: path,
        headers: headers,
        body: body,
        timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1
    }, options);
    if (!requestRes.ok) {
        return [
            requestRes,
            {
                status: "invalid"
            }
        ];
    }
    const req = requestRes.value;
    const doResult = await client._do(req, {
        context,
        errorCodes: [
            "4XX",
            "5XX"
        ],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
    });
    if (!doResult.ok) {
        return [
            doResult,
            {
                status: "request-error",
                request: req
            }
        ];
    }
    const response = doResult.value;
    const [result] = await M.match(M.json(200, components.BatchJobOut$inboundSchema), M.fail("4XX"), M.fail("5XX"))(response);
    if (!result.ok) {
        return [
            result,
            {
                status: "complete",
                request: req,
                response
            }
        ];
    }
    return [
        result,
        {
            status: "complete",
            request: req,
            response
        }
    ];
} //# sourceMappingURL=batchJobsCreate.js.map
}}),
"[project]/node_modules/@mistralai/mistralai/funcs/batchJobsGet.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */ var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.batchJobsGet = batchJobsGet;
const encodings_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/encodings.js [app-route] (ecmascript)");
const M = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/matchers.js [app-route] (ecmascript)"));
const primitives_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/primitives.js [app-route] (ecmascript)");
const schemas_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/schemas.js [app-route] (ecmascript)");
const security_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/security.js [app-route] (ecmascript)");
const url_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/url.js [app-route] (ecmascript)");
const components = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/components/index.js [app-route] (ecmascript)"));
const operations = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/operations/index.js [app-route] (ecmascript)"));
const async_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/types/async.js [app-route] (ecmascript)");
/**
 * Get Batch Job
 *
 * @remarks
 * Get a batch job details by its UUID.
 */ function batchJobsGet(client, request, options) {
    return new async_js_1.APIPromise($do(client, request, options));
}
async function $do(client, request, options) {
    const parsed = (0, schemas_js_1.safeParse)(request, (value)=>operations.JobsApiRoutesBatchGetBatchJobRequest$outboundSchema.parse(value), "Input validation failed");
    if (!parsed.ok) {
        return [
            parsed,
            {
                status: "invalid"
            }
        ];
    }
    const payload = parsed.value;
    const body = null;
    const pathParams = {
        job_id: (0, encodings_js_1.encodeSimple)("job_id", payload.job_id, {
            explode: false,
            charEncoding: "percent"
        })
    };
    const path = (0, url_js_1.pathToFunc)("/v1/batch/jobs/{job_id}")(pathParams);
    const headers = new Headers((0, primitives_js_1.compactMap)({
        Accept: "application/json"
    }));
    const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
    const securityInput = secConfig == null ? {} : {
        apiKey: secConfig
    };
    const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
    const context = {
        baseURL: options?.serverURL ?? client._baseURL ?? "",
        operationID: "jobs_api_routes_batch_get_batch_job",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: options?.retries || client._options.retryConfig || {
            strategy: "none"
        },
        retryCodes: options?.retryCodes || [
            "429",
            "500",
            "502",
            "503",
            "504"
        ]
    };
    const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "GET",
        baseURL: options?.serverURL,
        path: path,
        headers: headers,
        body: body,
        timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1
    }, options);
    if (!requestRes.ok) {
        return [
            requestRes,
            {
                status: "invalid"
            }
        ];
    }
    const req = requestRes.value;
    const doResult = await client._do(req, {
        context,
        errorCodes: [
            "4XX",
            "5XX"
        ],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
    });
    if (!doResult.ok) {
        return [
            doResult,
            {
                status: "request-error",
                request: req
            }
        ];
    }
    const response = doResult.value;
    const [result] = await M.match(M.json(200, components.BatchJobOut$inboundSchema), M.fail("4XX"), M.fail("5XX"))(response);
    if (!result.ok) {
        return [
            result,
            {
                status: "complete",
                request: req,
                response
            }
        ];
    }
    return [
        result,
        {
            status: "complete",
            request: req,
            response
        }
    ];
} //# sourceMappingURL=batchJobsGet.js.map
}}),
"[project]/node_modules/@mistralai/mistralai/funcs/batchJobsList.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */ var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.batchJobsList = batchJobsList;
const encodings_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/encodings.js [app-route] (ecmascript)");
const M = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/matchers.js [app-route] (ecmascript)"));
const primitives_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/primitives.js [app-route] (ecmascript)");
const schemas_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/schemas.js [app-route] (ecmascript)");
const security_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/security.js [app-route] (ecmascript)");
const url_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/url.js [app-route] (ecmascript)");
const components = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/components/index.js [app-route] (ecmascript)"));
const operations = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/operations/index.js [app-route] (ecmascript)"));
const async_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/types/async.js [app-route] (ecmascript)");
/**
 * Get Batch Jobs
 *
 * @remarks
 * Get a list of batch jobs for your organization and user.
 */ function batchJobsList(client, request, options) {
    return new async_js_1.APIPromise($do(client, request, options));
}
async function $do(client, request, options) {
    const parsed = (0, schemas_js_1.safeParse)(request, (value)=>operations.JobsApiRoutesBatchGetBatchJobsRequest$outboundSchema.optional().parse(value), "Input validation failed");
    if (!parsed.ok) {
        return [
            parsed,
            {
                status: "invalid"
            }
        ];
    }
    const payload = parsed.value;
    const body = null;
    const path = (0, url_js_1.pathToFunc)("/v1/batch/jobs")();
    const query = (0, encodings_js_1.encodeFormQuery)({
        "created_after": payload?.created_after,
        "created_by_me": payload?.created_by_me,
        "metadata": payload?.metadata,
        "model": payload?.model,
        "page": payload?.page,
        "page_size": payload?.page_size,
        "status": payload?.status
    });
    const headers = new Headers((0, primitives_js_1.compactMap)({
        Accept: "application/json"
    }));
    const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
    const securityInput = secConfig == null ? {} : {
        apiKey: secConfig
    };
    const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
    const context = {
        baseURL: options?.serverURL ?? client._baseURL ?? "",
        operationID: "jobs_api_routes_batch_get_batch_jobs",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: options?.retries || client._options.retryConfig || {
            strategy: "none"
        },
        retryCodes: options?.retryCodes || [
            "429",
            "500",
            "502",
            "503",
            "504"
        ]
    };
    const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "GET",
        baseURL: options?.serverURL,
        path: path,
        headers: headers,
        query: query,
        body: body,
        timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1
    }, options);
    if (!requestRes.ok) {
        return [
            requestRes,
            {
                status: "invalid"
            }
        ];
    }
    const req = requestRes.value;
    const doResult = await client._do(req, {
        context,
        errorCodes: [
            "4XX",
            "5XX"
        ],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
    });
    if (!doResult.ok) {
        return [
            doResult,
            {
                status: "request-error",
                request: req
            }
        ];
    }
    const response = doResult.value;
    const [result] = await M.match(M.json(200, components.BatchJobsOut$inboundSchema), M.fail("4XX"), M.fail("5XX"))(response);
    if (!result.ok) {
        return [
            result,
            {
                status: "complete",
                request: req,
                response
            }
        ];
    }
    return [
        result,
        {
            status: "complete",
            request: req,
            response
        }
    ];
} //# sourceMappingURL=batchJobsList.js.map
}}),
"[project]/node_modules/@mistralai/mistralai/funcs/betaConversationsAppend.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */ var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.betaConversationsAppend = betaConversationsAppend;
const encodings_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/encodings.js [app-route] (ecmascript)");
const M = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/matchers.js [app-route] (ecmascript)"));
const primitives_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/primitives.js [app-route] (ecmascript)");
const schemas_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/schemas.js [app-route] (ecmascript)");
const security_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/security.js [app-route] (ecmascript)");
const url_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/url.js [app-route] (ecmascript)");
const components = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/components/index.js [app-route] (ecmascript)"));
const errors = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/errors/index.js [app-route] (ecmascript)"));
const operations = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/operations/index.js [app-route] (ecmascript)"));
const async_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/types/async.js [app-route] (ecmascript)");
/**
 * Append new entries to an existing conversation.
 *
 * @remarks
 * Run completion on the history of the conversation and the user entries. Return the new created entries.
 */ function betaConversationsAppend(client, request, options) {
    return new async_js_1.APIPromise($do(client, request, options));
}
async function $do(client, request, options) {
    const parsed = (0, schemas_js_1.safeParse)(request, (value)=>operations.AgentsApiV1ConversationsAppendRequest$outboundSchema.parse(value), "Input validation failed");
    if (!parsed.ok) {
        return [
            parsed,
            {
                status: "invalid"
            }
        ];
    }
    const payload = parsed.value;
    const body = (0, encodings_js_1.encodeJSON)("body", payload.ConversationAppendRequest, {
        explode: true
    });
    const pathParams = {
        conversation_id: (0, encodings_js_1.encodeSimple)("conversation_id", payload.conversation_id, {
            explode: false,
            charEncoding: "percent"
        })
    };
    const path = (0, url_js_1.pathToFunc)("/v1/conversations/{conversation_id}")(pathParams);
    const headers = new Headers((0, primitives_js_1.compactMap)({
        "Content-Type": "application/json",
        Accept: "application/json"
    }));
    const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
    const securityInput = secConfig == null ? {} : {
        apiKey: secConfig
    };
    const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
    const context = {
        baseURL: options?.serverURL ?? client._baseURL ?? "",
        operationID: "agents_api_v1_conversations_append",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: options?.retries || client._options.retryConfig || {
            strategy: "none"
        },
        retryCodes: options?.retryCodes || [
            "429",
            "500",
            "502",
            "503",
            "504"
        ]
    };
    const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "POST",
        baseURL: options?.serverURL,
        path: path,
        headers: headers,
        body: body,
        timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1
    }, options);
    if (!requestRes.ok) {
        return [
            requestRes,
            {
                status: "invalid"
            }
        ];
    }
    const req = requestRes.value;
    const doResult = await client._do(req, {
        context,
        errorCodes: [
            "422",
            "4XX",
            "5XX"
        ],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
    });
    if (!doResult.ok) {
        return [
            doResult,
            {
                status: "request-error",
                request: req
            }
        ];
    }
    const response = doResult.value;
    const responseFields = {
        HttpMeta: {
            Response: response,
            Request: req
        }
    };
    const [result] = await M.match(M.json(200, components.ConversationResponse$inboundSchema), M.jsonErr(422, errors.HTTPValidationError$inboundSchema), M.fail("4XX"), M.fail("5XX"))(response, {
        extraFields: responseFields
    });
    if (!result.ok) {
        return [
            result,
            {
                status: "complete",
                request: req,
                response
            }
        ];
    }
    return [
        result,
        {
            status: "complete",
            request: req,
            response
        }
    ];
} //# sourceMappingURL=betaConversationsAppend.js.map
}}),
"[project]/node_modules/@mistralai/mistralai/funcs/betaConversationsAppendStream.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */ var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.betaConversationsAppendStream = betaConversationsAppendStream;
const z = __importStar(__turbopack_context__.r("[project]/node_modules/zod/dist/cjs/index.js [app-route] (ecmascript)"));
const encodings_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/encodings.js [app-route] (ecmascript)");
const event_streams_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/event-streams.js [app-route] (ecmascript)");
const M = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/matchers.js [app-route] (ecmascript)"));
const primitives_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/primitives.js [app-route] (ecmascript)");
const schemas_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/schemas.js [app-route] (ecmascript)");
const security_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/security.js [app-route] (ecmascript)");
const url_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/url.js [app-route] (ecmascript)");
const components = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/components/index.js [app-route] (ecmascript)"));
const errors = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/errors/index.js [app-route] (ecmascript)"));
const operations = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/operations/index.js [app-route] (ecmascript)"));
const async_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/types/async.js [app-route] (ecmascript)");
/**
 * Append new entries to an existing conversation.
 *
 * @remarks
 * Run completion on the history of the conversation and the user entries. Return the new created entries.
 */ function betaConversationsAppendStream(client, request, options) {
    return new async_js_1.APIPromise($do(client, request, options));
}
async function $do(client, request, options) {
    const parsed = (0, schemas_js_1.safeParse)(request, (value)=>operations.AgentsApiV1ConversationsAppendStreamRequest$outboundSchema.parse(value), "Input validation failed");
    if (!parsed.ok) {
        return [
            parsed,
            {
                status: "invalid"
            }
        ];
    }
    const payload = parsed.value;
    const body = (0, encodings_js_1.encodeJSON)("body", payload.ConversationAppendStreamRequest, {
        explode: true
    });
    const pathParams = {
        conversation_id: (0, encodings_js_1.encodeSimple)("conversation_id", payload.conversation_id, {
            explode: false,
            charEncoding: "percent"
        })
    };
    const path = (0, url_js_1.pathToFunc)("/v1/conversations/{conversation_id}#stream")(pathParams);
    const headers = new Headers((0, primitives_js_1.compactMap)({
        "Content-Type": "application/json",
        Accept: "text/event-stream"
    }));
    const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
    const securityInput = secConfig == null ? {} : {
        apiKey: secConfig
    };
    const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
    const context = {
        baseURL: options?.serverURL ?? client._baseURL ?? "",
        operationID: "agents_api_v1_conversations_append_stream",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: options?.retries || client._options.retryConfig || {
            strategy: "none"
        },
        retryCodes: options?.retryCodes || [
            "429",
            "500",
            "502",
            "503",
            "504"
        ]
    };
    const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "POST",
        baseURL: options?.serverURL,
        path: path,
        headers: headers,
        body: body,
        timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1
    }, options);
    if (!requestRes.ok) {
        return [
            requestRes,
            {
                status: "invalid"
            }
        ];
    }
    const req = requestRes.value;
    const doResult = await client._do(req, {
        context,
        errorCodes: [
            "422",
            "4XX",
            "5XX"
        ],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
    });
    if (!doResult.ok) {
        return [
            doResult,
            {
                status: "request-error",
                request: req
            }
        ];
    }
    const response = doResult.value;
    const responseFields = {
        HttpMeta: {
            Response: response,
            Request: req
        }
    };
    const [result] = await M.match(M.sse(200, z.instanceof(ReadableStream).transform((stream)=>{
        return new event_streams_js_1.EventStream({
            stream,
            decoder (rawEvent) {
                const schema = components.ConversationEvents$inboundSchema;
                return schema.parse(rawEvent);
            }
        });
    })), M.jsonErr(422, errors.HTTPValidationError$inboundSchema), M.fail("4XX"), M.fail("5XX"))(response, {
        extraFields: responseFields
    });
    if (!result.ok) {
        return [
            result,
            {
                status: "complete",
                request: req,
                response
            }
        ];
    }
    return [
        result,
        {
            status: "complete",
            request: req,
            response
        }
    ];
} //# sourceMappingURL=betaConversationsAppendStream.js.map
}}),
"[project]/node_modules/@mistralai/mistralai/funcs/betaConversationsGet.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */ var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.betaConversationsGet = betaConversationsGet;
const encodings_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/encodings.js [app-route] (ecmascript)");
const M = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/matchers.js [app-route] (ecmascript)"));
const primitives_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/primitives.js [app-route] (ecmascript)");
const schemas_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/schemas.js [app-route] (ecmascript)");
const security_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/security.js [app-route] (ecmascript)");
const url_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/url.js [app-route] (ecmascript)");
const errors = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/errors/index.js [app-route] (ecmascript)"));
const operations = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/operations/index.js [app-route] (ecmascript)"));
const async_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/types/async.js [app-route] (ecmascript)");
/**
 * Retrieve a conversation information.
 *
 * @remarks
 * Given a conversation_id retrieve a conversation entity with its attributes.
 */ function betaConversationsGet(client, request, options) {
    return new async_js_1.APIPromise($do(client, request, options));
}
async function $do(client, request, options) {
    const parsed = (0, schemas_js_1.safeParse)(request, (value)=>operations.AgentsApiV1ConversationsGetRequest$outboundSchema.parse(value), "Input validation failed");
    if (!parsed.ok) {
        return [
            parsed,
            {
                status: "invalid"
            }
        ];
    }
    const payload = parsed.value;
    const body = null;
    const pathParams = {
        conversation_id: (0, encodings_js_1.encodeSimple)("conversation_id", payload.conversation_id, {
            explode: false,
            charEncoding: "percent"
        })
    };
    const path = (0, url_js_1.pathToFunc)("/v1/conversations/{conversation_id}")(pathParams);
    const headers = new Headers((0, primitives_js_1.compactMap)({
        Accept: "application/json"
    }));
    const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
    const securityInput = secConfig == null ? {} : {
        apiKey: secConfig
    };
    const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
    const context = {
        baseURL: options?.serverURL ?? client._baseURL ?? "",
        operationID: "agents_api_v1_conversations_get",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: options?.retries || client._options.retryConfig || {
            strategy: "none"
        },
        retryCodes: options?.retryCodes || [
            "429",
            "500",
            "502",
            "503",
            "504"
        ]
    };
    const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "GET",
        baseURL: options?.serverURL,
        path: path,
        headers: headers,
        body: body,
        timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1
    }, options);
    if (!requestRes.ok) {
        return [
            requestRes,
            {
                status: "invalid"
            }
        ];
    }
    const req = requestRes.value;
    const doResult = await client._do(req, {
        context,
        errorCodes: [
            "422",
            "4XX",
            "5XX"
        ],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
    });
    if (!doResult.ok) {
        return [
            doResult,
            {
                status: "request-error",
                request: req
            }
        ];
    }
    const response = doResult.value;
    const responseFields = {
        HttpMeta: {
            Response: response,
            Request: req
        }
    };
    const [result] = await M.match(M.json(200, operations.AgentsApiV1ConversationsGetResponseV1ConversationsGet$inboundSchema), M.jsonErr(422, errors.HTTPValidationError$inboundSchema), M.fail("4XX"), M.fail("5XX"))(response, {
        extraFields: responseFields
    });
    if (!result.ok) {
        return [
            result,
            {
                status: "complete",
                request: req,
                response
            }
        ];
    }
    return [
        result,
        {
            status: "complete",
            request: req,
            response
        }
    ];
} //# sourceMappingURL=betaConversationsGet.js.map
}}),
"[project]/node_modules/@mistralai/mistralai/funcs/betaConversationsGetHistory.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */ var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.betaConversationsGetHistory = betaConversationsGetHistory;
const encodings_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/encodings.js [app-route] (ecmascript)");
const M = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/matchers.js [app-route] (ecmascript)"));
const primitives_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/primitives.js [app-route] (ecmascript)");
const schemas_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/schemas.js [app-route] (ecmascript)");
const security_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/security.js [app-route] (ecmascript)");
const url_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/url.js [app-route] (ecmascript)");
const components = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/components/index.js [app-route] (ecmascript)"));
const errors = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/errors/index.js [app-route] (ecmascript)"));
const operations = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/operations/index.js [app-route] (ecmascript)"));
const async_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/types/async.js [app-route] (ecmascript)");
/**
 * Retrieve all entries in a conversation.
 *
 * @remarks
 * Given a conversation_id retrieve all the entries belonging to that conversation. The entries are sorted in the order they were appended, those can be messages, connectors or function_call.
 */ function betaConversationsGetHistory(client, request, options) {
    return new async_js_1.APIPromise($do(client, request, options));
}
async function $do(client, request, options) {
    const parsed = (0, schemas_js_1.safeParse)(request, (value)=>operations.AgentsApiV1ConversationsHistoryRequest$outboundSchema.parse(value), "Input validation failed");
    if (!parsed.ok) {
        return [
            parsed,
            {
                status: "invalid"
            }
        ];
    }
    const payload = parsed.value;
    const body = null;
    const pathParams = {
        conversation_id: (0, encodings_js_1.encodeSimple)("conversation_id", payload.conversation_id, {
            explode: false,
            charEncoding: "percent"
        })
    };
    const path = (0, url_js_1.pathToFunc)("/v1/conversations/{conversation_id}/history")(pathParams);
    const headers = new Headers((0, primitives_js_1.compactMap)({
        Accept: "application/json"
    }));
    const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
    const securityInput = secConfig == null ? {} : {
        apiKey: secConfig
    };
    const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
    const context = {
        baseURL: options?.serverURL ?? client._baseURL ?? "",
        operationID: "agents_api_v1_conversations_history",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: options?.retries || client._options.retryConfig || {
            strategy: "none"
        },
        retryCodes: options?.retryCodes || [
            "429",
            "500",
            "502",
            "503",
            "504"
        ]
    };
    const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "GET",
        baseURL: options?.serverURL,
        path: path,
        headers: headers,
        body: body,
        timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1
    }, options);
    if (!requestRes.ok) {
        return [
            requestRes,
            {
                status: "invalid"
            }
        ];
    }
    const req = requestRes.value;
    const doResult = await client._do(req, {
        context,
        errorCodes: [
            "422",
            "4XX",
            "5XX"
        ],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
    });
    if (!doResult.ok) {
        return [
            doResult,
            {
                status: "request-error",
                request: req
            }
        ];
    }
    const response = doResult.value;
    const responseFields = {
        HttpMeta: {
            Response: response,
            Request: req
        }
    };
    const [result] = await M.match(M.json(200, components.ConversationHistory$inboundSchema), M.jsonErr(422, errors.HTTPValidationError$inboundSchema), M.fail("4XX"), M.fail("5XX"))(response, {
        extraFields: responseFields
    });
    if (!result.ok) {
        return [
            result,
            {
                status: "complete",
                request: req,
                response
            }
        ];
    }
    return [
        result,
        {
            status: "complete",
            request: req,
            response
        }
    ];
} //# sourceMappingURL=betaConversationsGetHistory.js.map
}}),
"[project]/node_modules/@mistralai/mistralai/funcs/betaConversationsGetMessages.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */ var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.betaConversationsGetMessages = betaConversationsGetMessages;
const encodings_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/encodings.js [app-route] (ecmascript)");
const M = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/matchers.js [app-route] (ecmascript)"));
const primitives_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/primitives.js [app-route] (ecmascript)");
const schemas_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/schemas.js [app-route] (ecmascript)");
const security_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/security.js [app-route] (ecmascript)");
const url_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/url.js [app-route] (ecmascript)");
const components = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/components/index.js [app-route] (ecmascript)"));
const errors = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/errors/index.js [app-route] (ecmascript)"));
const operations = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/operations/index.js [app-route] (ecmascript)"));
const async_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/types/async.js [app-route] (ecmascript)");
/**
 * Retrieve all messages in a conversation.
 *
 * @remarks
 * Given a conversation_id retrieve all the messages belonging to that conversation. This is similar to retrieving all entries except we filter the messages only.
 */ function betaConversationsGetMessages(client, request, options) {
    return new async_js_1.APIPromise($do(client, request, options));
}
async function $do(client, request, options) {
    const parsed = (0, schemas_js_1.safeParse)(request, (value)=>operations.AgentsApiV1ConversationsMessagesRequest$outboundSchema.parse(value), "Input validation failed");
    if (!parsed.ok) {
        return [
            parsed,
            {
                status: "invalid"
            }
        ];
    }
    const payload = parsed.value;
    const body = null;
    const pathParams = {
        conversation_id: (0, encodings_js_1.encodeSimple)("conversation_id", payload.conversation_id, {
            explode: false,
            charEncoding: "percent"
        })
    };
    const path = (0, url_js_1.pathToFunc)("/v1/conversations/{conversation_id}/messages")(pathParams);
    const headers = new Headers((0, primitives_js_1.compactMap)({
        Accept: "application/json"
    }));
    const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
    const securityInput = secConfig == null ? {} : {
        apiKey: secConfig
    };
    const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
    const context = {
        baseURL: options?.serverURL ?? client._baseURL ?? "",
        operationID: "agents_api_v1_conversations_messages",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: options?.retries || client._options.retryConfig || {
            strategy: "none"
        },
        retryCodes: options?.retryCodes || [
            "429",
            "500",
            "502",
            "503",
            "504"
        ]
    };
    const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "GET",
        baseURL: options?.serverURL,
        path: path,
        headers: headers,
        body: body,
        timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1
    }, options);
    if (!requestRes.ok) {
        return [
            requestRes,
            {
                status: "invalid"
            }
        ];
    }
    const req = requestRes.value;
    const doResult = await client._do(req, {
        context,
        errorCodes: [
            "422",
            "4XX",
            "5XX"
        ],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
    });
    if (!doResult.ok) {
        return [
            doResult,
            {
                status: "request-error",
                request: req
            }
        ];
    }
    const response = doResult.value;
    const responseFields = {
        HttpMeta: {
            Response: response,
            Request: req
        }
    };
    const [result] = await M.match(M.json(200, components.ConversationMessages$inboundSchema), M.jsonErr(422, errors.HTTPValidationError$inboundSchema), M.fail("4XX"), M.fail("5XX"))(response, {
        extraFields: responseFields
    });
    if (!result.ok) {
        return [
            result,
            {
                status: "complete",
                request: req,
                response
            }
        ];
    }
    return [
        result,
        {
            status: "complete",
            request: req,
            response
        }
    ];
} //# sourceMappingURL=betaConversationsGetMessages.js.map
}}),
"[project]/node_modules/@mistralai/mistralai/funcs/betaConversationsList.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */ var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.betaConversationsList = betaConversationsList;
const z = __importStar(__turbopack_context__.r("[project]/node_modules/zod/dist/cjs/index.js [app-route] (ecmascript)"));
const encodings_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/encodings.js [app-route] (ecmascript)");
const M = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/matchers.js [app-route] (ecmascript)"));
const primitives_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/primitives.js [app-route] (ecmascript)");
const schemas_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/schemas.js [app-route] (ecmascript)");
const security_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/security.js [app-route] (ecmascript)");
const url_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/url.js [app-route] (ecmascript)");
const errors = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/errors/index.js [app-route] (ecmascript)"));
const operations = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/operations/index.js [app-route] (ecmascript)"));
const async_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/types/async.js [app-route] (ecmascript)");
/**
 * List all created conversations.
 *
 * @remarks
 * Retrieve a list of conversation entities sorted by creation time.
 */ function betaConversationsList(client, request, options) {
    return new async_js_1.APIPromise($do(client, request, options));
}
async function $do(client, request, options) {
    const parsed = (0, schemas_js_1.safeParse)(request, (value)=>operations.AgentsApiV1ConversationsListRequest$outboundSchema.optional().parse(value), "Input validation failed");
    if (!parsed.ok) {
        return [
            parsed,
            {
                status: "invalid"
            }
        ];
    }
    const payload = parsed.value;
    const body = null;
    const path = (0, url_js_1.pathToFunc)("/v1/conversations")();
    const query = (0, encodings_js_1.encodeFormQuery)({
        "page": payload?.page,
        "page_size": payload?.page_size
    });
    const headers = new Headers((0, primitives_js_1.compactMap)({
        Accept: "application/json"
    }));
    const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
    const securityInput = secConfig == null ? {} : {
        apiKey: secConfig
    };
    const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
    const context = {
        baseURL: options?.serverURL ?? client._baseURL ?? "",
        operationID: "agents_api_v1_conversations_list",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: options?.retries || client._options.retryConfig || {
            strategy: "none"
        },
        retryCodes: options?.retryCodes || [
            "429",
            "500",
            "502",
            "503",
            "504"
        ]
    };
    const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "GET",
        baseURL: options?.serverURL,
        path: path,
        headers: headers,
        query: query,
        body: body,
        timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1
    }, options);
    if (!requestRes.ok) {
        return [
            requestRes,
            {
                status: "invalid"
            }
        ];
    }
    const req = requestRes.value;
    const doResult = await client._do(req, {
        context,
        errorCodes: [
            "422",
            "4XX",
            "5XX"
        ],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
    });
    if (!doResult.ok) {
        return [
            doResult,
            {
                status: "request-error",
                request: req
            }
        ];
    }
    const response = doResult.value;
    const responseFields = {
        HttpMeta: {
            Response: response,
            Request: req
        }
    };
    const [result] = await M.match(M.json(200, z.array(operations.ResponseBody$inboundSchema)), M.jsonErr(422, errors.HTTPValidationError$inboundSchema), M.fail("4XX"), M.fail("5XX"))(response, {
        extraFields: responseFields
    });
    if (!result.ok) {
        return [
            result,
            {
                status: "complete",
                request: req,
                response
            }
        ];
    }
    return [
        result,
        {
            status: "complete",
            request: req,
            response
        }
    ];
} //# sourceMappingURL=betaConversationsList.js.map
}}),
"[project]/node_modules/@mistralai/mistralai/funcs/betaConversationsRestart.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */ var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.betaConversationsRestart = betaConversationsRestart;
const encodings_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/encodings.js [app-route] (ecmascript)");
const M = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/matchers.js [app-route] (ecmascript)"));
const primitives_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/primitives.js [app-route] (ecmascript)");
const schemas_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/schemas.js [app-route] (ecmascript)");
const security_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/security.js [app-route] (ecmascript)");
const url_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/url.js [app-route] (ecmascript)");
const components = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/components/index.js [app-route] (ecmascript)"));
const errors = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/errors/index.js [app-route] (ecmascript)"));
const operations = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/operations/index.js [app-route] (ecmascript)"));
const async_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/types/async.js [app-route] (ecmascript)");
/**
 * Restart a conversation starting from a given entry.
 *
 * @remarks
 * Given a conversation_id and an id, recreate a conversation from this point and run completion. A new conversation is returned with the new entries returned.
 */ function betaConversationsRestart(client, request, options) {
    return new async_js_1.APIPromise($do(client, request, options));
}
async function $do(client, request, options) {
    const parsed = (0, schemas_js_1.safeParse)(request, (value)=>operations.AgentsApiV1ConversationsRestartRequest$outboundSchema.parse(value), "Input validation failed");
    if (!parsed.ok) {
        return [
            parsed,
            {
                status: "invalid"
            }
        ];
    }
    const payload = parsed.value;
    const body = (0, encodings_js_1.encodeJSON)("body", payload.ConversationRestartRequest, {
        explode: true
    });
    const pathParams = {
        conversation_id: (0, encodings_js_1.encodeSimple)("conversation_id", payload.conversation_id, {
            explode: false,
            charEncoding: "percent"
        })
    };
    const path = (0, url_js_1.pathToFunc)("/v1/conversations/{conversation_id}/restart")(pathParams);
    const headers = new Headers((0, primitives_js_1.compactMap)({
        "Content-Type": "application/json",
        Accept: "application/json"
    }));
    const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
    const securityInput = secConfig == null ? {} : {
        apiKey: secConfig
    };
    const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
    const context = {
        baseURL: options?.serverURL ?? client._baseURL ?? "",
        operationID: "agents_api_v1_conversations_restart",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: options?.retries || client._options.retryConfig || {
            strategy: "none"
        },
        retryCodes: options?.retryCodes || [
            "429",
            "500",
            "502",
            "503",
            "504"
        ]
    };
    const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "POST",
        baseURL: options?.serverURL,
        path: path,
        headers: headers,
        body: body,
        timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1
    }, options);
    if (!requestRes.ok) {
        return [
            requestRes,
            {
                status: "invalid"
            }
        ];
    }
    const req = requestRes.value;
    const doResult = await client._do(req, {
        context,
        errorCodes: [
            "422",
            "4XX",
            "5XX"
        ],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
    });
    if (!doResult.ok) {
        return [
            doResult,
            {
                status: "request-error",
                request: req
            }
        ];
    }
    const response = doResult.value;
    const responseFields = {
        HttpMeta: {
            Response: response,
            Request: req
        }
    };
    const [result] = await M.match(M.json(200, components.ConversationResponse$inboundSchema), M.jsonErr(422, errors.HTTPValidationError$inboundSchema), M.fail("4XX"), M.fail("5XX"))(response, {
        extraFields: responseFields
    });
    if (!result.ok) {
        return [
            result,
            {
                status: "complete",
                request: req,
                response
            }
        ];
    }
    return [
        result,
        {
            status: "complete",
            request: req,
            response
        }
    ];
} //# sourceMappingURL=betaConversationsRestart.js.map
}}),
"[project]/node_modules/@mistralai/mistralai/funcs/betaConversationsRestartStream.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */ var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.betaConversationsRestartStream = betaConversationsRestartStream;
const z = __importStar(__turbopack_context__.r("[project]/node_modules/zod/dist/cjs/index.js [app-route] (ecmascript)"));
const encodings_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/encodings.js [app-route] (ecmascript)");
const event_streams_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/event-streams.js [app-route] (ecmascript)");
const M = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/matchers.js [app-route] (ecmascript)"));
const primitives_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/primitives.js [app-route] (ecmascript)");
const schemas_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/schemas.js [app-route] (ecmascript)");
const security_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/security.js [app-route] (ecmascript)");
const url_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/url.js [app-route] (ecmascript)");
const components = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/components/index.js [app-route] (ecmascript)"));
const errors = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/errors/index.js [app-route] (ecmascript)"));
const operations = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/operations/index.js [app-route] (ecmascript)"));
const async_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/types/async.js [app-route] (ecmascript)");
/**
 * Restart a conversation starting from a given entry.
 *
 * @remarks
 * Given a conversation_id and an id, recreate a conversation from this point and run completion. A new conversation is returned with the new entries returned.
 */ function betaConversationsRestartStream(client, request, options) {
    return new async_js_1.APIPromise($do(client, request, options));
}
async function $do(client, request, options) {
    const parsed = (0, schemas_js_1.safeParse)(request, (value)=>operations.AgentsApiV1ConversationsRestartStreamRequest$outboundSchema.parse(value), "Input validation failed");
    if (!parsed.ok) {
        return [
            parsed,
            {
                status: "invalid"
            }
        ];
    }
    const payload = parsed.value;
    const body = (0, encodings_js_1.encodeJSON)("body", payload.ConversationRestartStreamRequest, {
        explode: true
    });
    const pathParams = {
        conversation_id: (0, encodings_js_1.encodeSimple)("conversation_id", payload.conversation_id, {
            explode: false,
            charEncoding: "percent"
        })
    };
    const path = (0, url_js_1.pathToFunc)("/v1/conversations/{conversation_id}/restart#stream")(pathParams);
    const headers = new Headers((0, primitives_js_1.compactMap)({
        "Content-Type": "application/json",
        Accept: "text/event-stream"
    }));
    const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
    const securityInput = secConfig == null ? {} : {
        apiKey: secConfig
    };
    const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
    const context = {
        baseURL: options?.serverURL ?? client._baseURL ?? "",
        operationID: "agents_api_v1_conversations_restart_stream",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: options?.retries || client._options.retryConfig || {
            strategy: "none"
        },
        retryCodes: options?.retryCodes || [
            "429",
            "500",
            "502",
            "503",
            "504"
        ]
    };
    const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "POST",
        baseURL: options?.serverURL,
        path: path,
        headers: headers,
        body: body,
        timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1
    }, options);
    if (!requestRes.ok) {
        return [
            requestRes,
            {
                status: "invalid"
            }
        ];
    }
    const req = requestRes.value;
    const doResult = await client._do(req, {
        context,
        errorCodes: [
            "422",
            "4XX",
            "5XX"
        ],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
    });
    if (!doResult.ok) {
        return [
            doResult,
            {
                status: "request-error",
                request: req
            }
        ];
    }
    const response = doResult.value;
    const responseFields = {
        HttpMeta: {
            Response: response,
            Request: req
        }
    };
    const [result] = await M.match(M.sse(200, z.instanceof(ReadableStream).transform((stream)=>{
        return new event_streams_js_1.EventStream({
            stream,
            decoder (rawEvent) {
                const schema = components.ConversationEvents$inboundSchema;
                return schema.parse(rawEvent);
            }
        });
    })), M.jsonErr(422, errors.HTTPValidationError$inboundSchema), M.fail("4XX"), M.fail("5XX"))(response, {
        extraFields: responseFields
    });
    if (!result.ok) {
        return [
            result,
            {
                status: "complete",
                request: req,
                response
            }
        ];
    }
    return [
        result,
        {
            status: "complete",
            request: req,
            response
        }
    ];
} //# sourceMappingURL=betaConversationsRestartStream.js.map
}}),
"[project]/node_modules/@mistralai/mistralai/funcs/betaConversationsStart.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */ var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.betaConversationsStart = betaConversationsStart;
const encodings_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/encodings.js [app-route] (ecmascript)");
const M = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/matchers.js [app-route] (ecmascript)"));
const primitives_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/primitives.js [app-route] (ecmascript)");
const schemas_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/schemas.js [app-route] (ecmascript)");
const security_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/security.js [app-route] (ecmascript)");
const url_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/url.js [app-route] (ecmascript)");
const components = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/components/index.js [app-route] (ecmascript)"));
const errors = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/errors/index.js [app-route] (ecmascript)"));
const async_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/types/async.js [app-route] (ecmascript)");
/**
 * Create a conversation and append entries to it.
 *
 * @remarks
 * Create a new conversation, using a base model or an agent and append entries. Completion and tool executions are run and the response is appended to the conversation.Use the returned conversation_id to continue the conversation.
 */ function betaConversationsStart(client, request, options) {
    return new async_js_1.APIPromise($do(client, request, options));
}
async function $do(client, request, options) {
    const parsed = (0, schemas_js_1.safeParse)(request, (value)=>components.ConversationRequest$outboundSchema.parse(value), "Input validation failed");
    if (!parsed.ok) {
        return [
            parsed,
            {
                status: "invalid"
            }
        ];
    }
    const payload = parsed.value;
    const body = (0, encodings_js_1.encodeJSON)("body", payload, {
        explode: true
    });
    const path = (0, url_js_1.pathToFunc)("/v1/conversations")();
    const headers = new Headers((0, primitives_js_1.compactMap)({
        "Content-Type": "application/json",
        Accept: "application/json"
    }));
    const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
    const securityInput = secConfig == null ? {} : {
        apiKey: secConfig
    };
    const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
    const context = {
        baseURL: options?.serverURL ?? client._baseURL ?? "",
        operationID: "agents_api_v1_conversations_start",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: options?.retries || client._options.retryConfig || {
            strategy: "none"
        },
        retryCodes: options?.retryCodes || [
            "429",
            "500",
            "502",
            "503",
            "504"
        ]
    };
    const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "POST",
        baseURL: options?.serverURL,
        path: path,
        headers: headers,
        body: body,
        timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1
    }, options);
    if (!requestRes.ok) {
        return [
            requestRes,
            {
                status: "invalid"
            }
        ];
    }
    const req = requestRes.value;
    const doResult = await client._do(req, {
        context,
        errorCodes: [
            "422",
            "4XX",
            "5XX"
        ],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
    });
    if (!doResult.ok) {
        return [
            doResult,
            {
                status: "request-error",
                request: req
            }
        ];
    }
    const response = doResult.value;
    const responseFields = {
        HttpMeta: {
            Response: response,
            Request: req
        }
    };
    const [result] = await M.match(M.json(200, components.ConversationResponse$inboundSchema), M.jsonErr(422, errors.HTTPValidationError$inboundSchema), M.fail("4XX"), M.fail("5XX"))(response, {
        extraFields: responseFields
    });
    if (!result.ok) {
        return [
            result,
            {
                status: "complete",
                request: req,
                response
            }
        ];
    }
    return [
        result,
        {
            status: "complete",
            request: req,
            response
        }
    ];
} //# sourceMappingURL=betaConversationsStart.js.map
}}),
"[project]/node_modules/@mistralai/mistralai/funcs/betaConversationsStartStream.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */ var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.betaConversationsStartStream = betaConversationsStartStream;
const z = __importStar(__turbopack_context__.r("[project]/node_modules/zod/dist/cjs/index.js [app-route] (ecmascript)"));
const encodings_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/encodings.js [app-route] (ecmascript)");
const event_streams_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/event-streams.js [app-route] (ecmascript)");
const M = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/matchers.js [app-route] (ecmascript)"));
const primitives_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/primitives.js [app-route] (ecmascript)");
const schemas_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/schemas.js [app-route] (ecmascript)");
const security_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/security.js [app-route] (ecmascript)");
const url_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/url.js [app-route] (ecmascript)");
const components = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/components/index.js [app-route] (ecmascript)"));
const errors = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/errors/index.js [app-route] (ecmascript)"));
const async_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/types/async.js [app-route] (ecmascript)");
/**
 * Create a conversation and append entries to it.
 *
 * @remarks
 * Create a new conversation, using a base model or an agent and append entries. Completion and tool executions are run and the response is appended to the conversation.Use the returned conversation_id to continue the conversation.
 */ function betaConversationsStartStream(client, request, options) {
    return new async_js_1.APIPromise($do(client, request, options));
}
async function $do(client, request, options) {
    const parsed = (0, schemas_js_1.safeParse)(request, (value)=>components.ConversationStreamRequest$outboundSchema.parse(value), "Input validation failed");
    if (!parsed.ok) {
        return [
            parsed,
            {
                status: "invalid"
            }
        ];
    }
    const payload = parsed.value;
    const body = (0, encodings_js_1.encodeJSON)("body", payload, {
        explode: true
    });
    const path = (0, url_js_1.pathToFunc)("/v1/conversations#stream")();
    const headers = new Headers((0, primitives_js_1.compactMap)({
        "Content-Type": "application/json",
        Accept: "text/event-stream"
    }));
    const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
    const securityInput = secConfig == null ? {} : {
        apiKey: secConfig
    };
    const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
    const context = {
        baseURL: options?.serverURL ?? client._baseURL ?? "",
        operationID: "agents_api_v1_conversations_start_stream",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: options?.retries || client._options.retryConfig || {
            strategy: "none"
        },
        retryCodes: options?.retryCodes || [
            "429",
            "500",
            "502",
            "503",
            "504"
        ]
    };
    const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "POST",
        baseURL: options?.serverURL,
        path: path,
        headers: headers,
        body: body,
        timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1
    }, options);
    if (!requestRes.ok) {
        return [
            requestRes,
            {
                status: "invalid"
            }
        ];
    }
    const req = requestRes.value;
    const doResult = await client._do(req, {
        context,
        errorCodes: [
            "422",
            "4XX",
            "5XX"
        ],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
    });
    if (!doResult.ok) {
        return [
            doResult,
            {
                status: "request-error",
                request: req
            }
        ];
    }
    const response = doResult.value;
    const responseFields = {
        HttpMeta: {
            Response: response,
            Request: req
        }
    };
    const [result] = await M.match(M.sse(200, z.instanceof(ReadableStream).transform((stream)=>{
        return new event_streams_js_1.EventStream({
            stream,
            decoder (rawEvent) {
                const schema = components.ConversationEvents$inboundSchema;
                return schema.parse(rawEvent);
            }
        });
    })), M.jsonErr(422, errors.HTTPValidationError$inboundSchema), M.fail("4XX"), M.fail("5XX"))(response, {
        extraFields: responseFields
    });
    if (!result.ok) {
        return [
            result,
            {
                status: "complete",
                request: req,
                response
            }
        ];
    }
    return [
        result,
        {
            status: "complete",
            request: req,
            response
        }
    ];
} //# sourceMappingURL=betaConversationsStartStream.js.map
}}),
"[project]/node_modules/@mistralai/mistralai/funcs/betaAgentsCreate.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */ var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.betaAgentsCreate = betaAgentsCreate;
const encodings_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/encodings.js [app-route] (ecmascript)");
const M = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/matchers.js [app-route] (ecmascript)"));
const primitives_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/primitives.js [app-route] (ecmascript)");
const schemas_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/schemas.js [app-route] (ecmascript)");
const security_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/security.js [app-route] (ecmascript)");
const url_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/url.js [app-route] (ecmascript)");
const components = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/components/index.js [app-route] (ecmascript)"));
const errors = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/errors/index.js [app-route] (ecmascript)"));
const async_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/types/async.js [app-route] (ecmascript)");
/**
 * Create a agent that can be used within a conversation.
 *
 * @remarks
 * Create a new agent giving it instructions, tools, description. The agent is then available to be used as a regular assistant in a conversation or as part of an agent pool from which it can be used.
 */ function betaAgentsCreate(client, request, options) {
    return new async_js_1.APIPromise($do(client, request, options));
}
async function $do(client, request, options) {
    const parsed = (0, schemas_js_1.safeParse)(request, (value)=>components.AgentCreationRequest$outboundSchema.parse(value), "Input validation failed");
    if (!parsed.ok) {
        return [
            parsed,
            {
                status: "invalid"
            }
        ];
    }
    const payload = parsed.value;
    const body = (0, encodings_js_1.encodeJSON)("body", payload, {
        explode: true
    });
    const path = (0, url_js_1.pathToFunc)("/v1/agents")();
    const headers = new Headers((0, primitives_js_1.compactMap)({
        "Content-Type": "application/json",
        Accept: "application/json"
    }));
    const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
    const securityInput = secConfig == null ? {} : {
        apiKey: secConfig
    };
    const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
    const context = {
        baseURL: options?.serverURL ?? client._baseURL ?? "",
        operationID: "agents_api_v1_agents_create",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: options?.retries || client._options.retryConfig || {
            strategy: "none"
        },
        retryCodes: options?.retryCodes || [
            "429",
            "500",
            "502",
            "503",
            "504"
        ]
    };
    const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "POST",
        baseURL: options?.serverURL,
        path: path,
        headers: headers,
        body: body,
        timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1
    }, options);
    if (!requestRes.ok) {
        return [
            requestRes,
            {
                status: "invalid"
            }
        ];
    }
    const req = requestRes.value;
    const doResult = await client._do(req, {
        context,
        errorCodes: [
            "422",
            "4XX",
            "5XX"
        ],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
    });
    if (!doResult.ok) {
        return [
            doResult,
            {
                status: "request-error",
                request: req
            }
        ];
    }
    const response = doResult.value;
    const responseFields = {
        HttpMeta: {
            Response: response,
            Request: req
        }
    };
    const [result] = await M.match(M.json(200, components.Agent$inboundSchema), M.jsonErr(422, errors.HTTPValidationError$inboundSchema), M.fail("4XX"), M.fail("5XX"))(response, {
        extraFields: responseFields
    });
    if (!result.ok) {
        return [
            result,
            {
                status: "complete",
                request: req,
                response
            }
        ];
    }
    return [
        result,
        {
            status: "complete",
            request: req,
            response
        }
    ];
} //# sourceMappingURL=betaAgentsCreate.js.map
}}),
"[project]/node_modules/@mistralai/mistralai/funcs/betaAgentsGet.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */ var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.betaAgentsGet = betaAgentsGet;
const encodings_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/encodings.js [app-route] (ecmascript)");
const M = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/matchers.js [app-route] (ecmascript)"));
const primitives_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/primitives.js [app-route] (ecmascript)");
const schemas_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/schemas.js [app-route] (ecmascript)");
const security_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/security.js [app-route] (ecmascript)");
const url_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/url.js [app-route] (ecmascript)");
const components = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/components/index.js [app-route] (ecmascript)"));
const errors = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/errors/index.js [app-route] (ecmascript)"));
const operations = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/operations/index.js [app-route] (ecmascript)"));
const async_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/types/async.js [app-route] (ecmascript)");
/**
 * Retrieve an agent entity.
 *
 * @remarks
 * Given an agent retrieve an agent entity with its attributes.
 */ function betaAgentsGet(client, request, options) {
    return new async_js_1.APIPromise($do(client, request, options));
}
async function $do(client, request, options) {
    const parsed = (0, schemas_js_1.safeParse)(request, (value)=>operations.AgentsApiV1AgentsGetRequest$outboundSchema.parse(value), "Input validation failed");
    if (!parsed.ok) {
        return [
            parsed,
            {
                status: "invalid"
            }
        ];
    }
    const payload = parsed.value;
    const body = null;
    const pathParams = {
        agent_id: (0, encodings_js_1.encodeSimple)("agent_id", payload.agent_id, {
            explode: false,
            charEncoding: "percent"
        })
    };
    const path = (0, url_js_1.pathToFunc)("/v1/agents/{agent_id}")(pathParams);
    const headers = new Headers((0, primitives_js_1.compactMap)({
        Accept: "application/json"
    }));
    const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
    const securityInput = secConfig == null ? {} : {
        apiKey: secConfig
    };
    const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
    const context = {
        baseURL: options?.serverURL ?? client._baseURL ?? "",
        operationID: "agents_api_v1_agents_get",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: options?.retries || client._options.retryConfig || {
            strategy: "none"
        },
        retryCodes: options?.retryCodes || [
            "429",
            "500",
            "502",
            "503",
            "504"
        ]
    };
    const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "GET",
        baseURL: options?.serverURL,
        path: path,
        headers: headers,
        body: body,
        timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1
    }, options);
    if (!requestRes.ok) {
        return [
            requestRes,
            {
                status: "invalid"
            }
        ];
    }
    const req = requestRes.value;
    const doResult = await client._do(req, {
        context,
        errorCodes: [
            "422",
            "4XX",
            "5XX"
        ],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
    });
    if (!doResult.ok) {
        return [
            doResult,
            {
                status: "request-error",
                request: req
            }
        ];
    }
    const response = doResult.value;
    const responseFields = {
        HttpMeta: {
            Response: response,
            Request: req
        }
    };
    const [result] = await M.match(M.json(200, components.Agent$inboundSchema), M.jsonErr(422, errors.HTTPValidationError$inboundSchema), M.fail("4XX"), M.fail("5XX"))(response, {
        extraFields: responseFields
    });
    if (!result.ok) {
        return [
            result,
            {
                status: "complete",
                request: req,
                response
            }
        ];
    }
    return [
        result,
        {
            status: "complete",
            request: req,
            response
        }
    ];
} //# sourceMappingURL=betaAgentsGet.js.map
}}),
"[project]/node_modules/@mistralai/mistralai/funcs/betaAgentsList.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */ var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.betaAgentsList = betaAgentsList;
const z = __importStar(__turbopack_context__.r("[project]/node_modules/zod/dist/cjs/index.js [app-route] (ecmascript)"));
const encodings_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/encodings.js [app-route] (ecmascript)");
const M = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/matchers.js [app-route] (ecmascript)"));
const primitives_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/primitives.js [app-route] (ecmascript)");
const schemas_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/schemas.js [app-route] (ecmascript)");
const security_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/security.js [app-route] (ecmascript)");
const url_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/url.js [app-route] (ecmascript)");
const components = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/components/index.js [app-route] (ecmascript)"));
const errors = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/errors/index.js [app-route] (ecmascript)"));
const operations = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/operations/index.js [app-route] (ecmascript)"));
const async_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/types/async.js [app-route] (ecmascript)");
/**
 * List agent entities.
 *
 * @remarks
 * Retrieve a list of agent entities sorted by creation time.
 */ function betaAgentsList(client, request, options) {
    return new async_js_1.APIPromise($do(client, request, options));
}
async function $do(client, request, options) {
    const parsed = (0, schemas_js_1.safeParse)(request, (value)=>operations.AgentsApiV1AgentsListRequest$outboundSchema.optional().parse(value), "Input validation failed");
    if (!parsed.ok) {
        return [
            parsed,
            {
                status: "invalid"
            }
        ];
    }
    const payload = parsed.value;
    const body = null;
    const path = (0, url_js_1.pathToFunc)("/v1/agents")();
    const query = (0, encodings_js_1.encodeFormQuery)({
        "page": payload?.page,
        "page_size": payload?.page_size
    });
    const headers = new Headers((0, primitives_js_1.compactMap)({
        Accept: "application/json"
    }));
    const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
    const securityInput = secConfig == null ? {} : {
        apiKey: secConfig
    };
    const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
    const context = {
        baseURL: options?.serverURL ?? client._baseURL ?? "",
        operationID: "agents_api_v1_agents_list",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: options?.retries || client._options.retryConfig || {
            strategy: "none"
        },
        retryCodes: options?.retryCodes || [
            "429",
            "500",
            "502",
            "503",
            "504"
        ]
    };
    const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "GET",
        baseURL: options?.serverURL,
        path: path,
        headers: headers,
        query: query,
        body: body,
        timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1
    }, options);
    if (!requestRes.ok) {
        return [
            requestRes,
            {
                status: "invalid"
            }
        ];
    }
    const req = requestRes.value;
    const doResult = await client._do(req, {
        context,
        errorCodes: [
            "422",
            "4XX",
            "5XX"
        ],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
    });
    if (!doResult.ok) {
        return [
            doResult,
            {
                status: "request-error",
                request: req
            }
        ];
    }
    const response = doResult.value;
    const responseFields = {
        HttpMeta: {
            Response: response,
            Request: req
        }
    };
    const [result] = await M.match(M.json(200, z.array(components.Agent$inboundSchema)), M.jsonErr(422, errors.HTTPValidationError$inboundSchema), M.fail("4XX"), M.fail("5XX"))(response, {
        extraFields: responseFields
    });
    if (!result.ok) {
        return [
            result,
            {
                status: "complete",
                request: req,
                response
            }
        ];
    }
    return [
        result,
        {
            status: "complete",
            request: req,
            response
        }
    ];
} //# sourceMappingURL=betaAgentsList.js.map
}}),
"[project]/node_modules/@mistralai/mistralai/funcs/betaAgentsUpdate.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */ var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.betaAgentsUpdate = betaAgentsUpdate;
const encodings_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/encodings.js [app-route] (ecmascript)");
const M = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/matchers.js [app-route] (ecmascript)"));
const primitives_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/primitives.js [app-route] (ecmascript)");
const schemas_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/schemas.js [app-route] (ecmascript)");
const security_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/security.js [app-route] (ecmascript)");
const url_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/url.js [app-route] (ecmascript)");
const components = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/components/index.js [app-route] (ecmascript)"));
const errors = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/errors/index.js [app-route] (ecmascript)"));
const operations = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/operations/index.js [app-route] (ecmascript)"));
const async_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/types/async.js [app-route] (ecmascript)");
/**
 * Update an agent entity.
 *
 * @remarks
 * Update an agent attributes and create a new version.
 */ function betaAgentsUpdate(client, request, options) {
    return new async_js_1.APIPromise($do(client, request, options));
}
async function $do(client, request, options) {
    const parsed = (0, schemas_js_1.safeParse)(request, (value)=>operations.AgentsApiV1AgentsUpdateRequest$outboundSchema.parse(value), "Input validation failed");
    if (!parsed.ok) {
        return [
            parsed,
            {
                status: "invalid"
            }
        ];
    }
    const payload = parsed.value;
    const body = (0, encodings_js_1.encodeJSON)("body", payload.AgentUpdateRequest, {
        explode: true
    });
    const pathParams = {
        agent_id: (0, encodings_js_1.encodeSimple)("agent_id", payload.agent_id, {
            explode: false,
            charEncoding: "percent"
        })
    };
    const path = (0, url_js_1.pathToFunc)("/v1/agents/{agent_id}")(pathParams);
    const headers = new Headers((0, primitives_js_1.compactMap)({
        "Content-Type": "application/json",
        Accept: "application/json"
    }));
    const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
    const securityInput = secConfig == null ? {} : {
        apiKey: secConfig
    };
    const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
    const context = {
        baseURL: options?.serverURL ?? client._baseURL ?? "",
        operationID: "agents_api_v1_agents_update",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: options?.retries || client._options.retryConfig || {
            strategy: "none"
        },
        retryCodes: options?.retryCodes || [
            "429",
            "500",
            "502",
            "503",
            "504"
        ]
    };
    const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "PATCH",
        baseURL: options?.serverURL,
        path: path,
        headers: headers,
        body: body,
        timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1
    }, options);
    if (!requestRes.ok) {
        return [
            requestRes,
            {
                status: "invalid"
            }
        ];
    }
    const req = requestRes.value;
    const doResult = await client._do(req, {
        context,
        errorCodes: [
            "422",
            "4XX",
            "5XX"
        ],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
    });
    if (!doResult.ok) {
        return [
            doResult,
            {
                status: "request-error",
                request: req
            }
        ];
    }
    const response = doResult.value;
    const responseFields = {
        HttpMeta: {
            Response: response,
            Request: req
        }
    };
    const [result] = await M.match(M.json(200, components.Agent$inboundSchema), M.jsonErr(422, errors.HTTPValidationError$inboundSchema), M.fail("4XX"), M.fail("5XX"))(response, {
        extraFields: responseFields
    });
    if (!result.ok) {
        return [
            result,
            {
                status: "complete",
                request: req,
                response
            }
        ];
    }
    return [
        result,
        {
            status: "complete",
            request: req,
            response
        }
    ];
} //# sourceMappingURL=betaAgentsUpdate.js.map
}}),
"[project]/node_modules/@mistralai/mistralai/funcs/betaAgentsUpdateVersion.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */ var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.betaAgentsUpdateVersion = betaAgentsUpdateVersion;
const encodings_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/encodings.js [app-route] (ecmascript)");
const M = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/matchers.js [app-route] (ecmascript)"));
const primitives_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/primitives.js [app-route] (ecmascript)");
const schemas_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/schemas.js [app-route] (ecmascript)");
const security_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/security.js [app-route] (ecmascript)");
const url_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/url.js [app-route] (ecmascript)");
const components = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/components/index.js [app-route] (ecmascript)"));
const errors = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/errors/index.js [app-route] (ecmascript)"));
const operations = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/operations/index.js [app-route] (ecmascript)"));
const async_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/types/async.js [app-route] (ecmascript)");
/**
 * Update an agent version.
 *
 * @remarks
 * Switch the version of an agent.
 */ function betaAgentsUpdateVersion(client, request, options) {
    return new async_js_1.APIPromise($do(client, request, options));
}
async function $do(client, request, options) {
    const parsed = (0, schemas_js_1.safeParse)(request, (value)=>operations.AgentsApiV1AgentsUpdateVersionRequest$outboundSchema.parse(value), "Input validation failed");
    if (!parsed.ok) {
        return [
            parsed,
            {
                status: "invalid"
            }
        ];
    }
    const payload = parsed.value;
    const body = null;
    const pathParams = {
        agent_id: (0, encodings_js_1.encodeSimple)("agent_id", payload.agent_id, {
            explode: false,
            charEncoding: "percent"
        })
    };
    const path = (0, url_js_1.pathToFunc)("/v1/agents/{agent_id}/version")(pathParams);
    const query = (0, encodings_js_1.encodeFormQuery)({
        "version": payload.version
    });
    const headers = new Headers((0, primitives_js_1.compactMap)({
        Accept: "application/json"
    }));
    const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
    const securityInput = secConfig == null ? {} : {
        apiKey: secConfig
    };
    const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
    const context = {
        baseURL: options?.serverURL ?? client._baseURL ?? "",
        operationID: "agents_api_v1_agents_update_version",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: options?.retries || client._options.retryConfig || {
            strategy: "none"
        },
        retryCodes: options?.retryCodes || [
            "429",
            "500",
            "502",
            "503",
            "504"
        ]
    };
    const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "PATCH",
        baseURL: options?.serverURL,
        path: path,
        headers: headers,
        query: query,
        body: body,
        timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1
    }, options);
    if (!requestRes.ok) {
        return [
            requestRes,
            {
                status: "invalid"
            }
        ];
    }
    const req = requestRes.value;
    const doResult = await client._do(req, {
        context,
        errorCodes: [
            "422",
            "4XX",
            "5XX"
        ],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
    });
    if (!doResult.ok) {
        return [
            doResult,
            {
                status: "request-error",
                request: req
            }
        ];
    }
    const response = doResult.value;
    const responseFields = {
        HttpMeta: {
            Response: response,
            Request: req
        }
    };
    const [result] = await M.match(M.json(200, components.Agent$inboundSchema), M.jsonErr(422, errors.HTTPValidationError$inboundSchema), M.fail("4XX"), M.fail("5XX"))(response, {
        extraFields: responseFields
    });
    if (!result.ok) {
        return [
            result,
            {
                status: "complete",
                request: req,
                response
            }
        ];
    }
    return [
        result,
        {
            status: "complete",
            request: req,
            response
        }
    ];
} //# sourceMappingURL=betaAgentsUpdateVersion.js.map
}}),
"[project]/node_modules/@mistralai/mistralai/funcs/chatComplete.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */ var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.chatComplete = chatComplete;
const encodings_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/encodings.js [app-route] (ecmascript)");
const M = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/matchers.js [app-route] (ecmascript)"));
const primitives_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/primitives.js [app-route] (ecmascript)");
const schemas_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/schemas.js [app-route] (ecmascript)");
const security_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/security.js [app-route] (ecmascript)");
const url_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/url.js [app-route] (ecmascript)");
const components = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/components/index.js [app-route] (ecmascript)"));
const errors = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/errors/index.js [app-route] (ecmascript)"));
const async_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/types/async.js [app-route] (ecmascript)");
/**
 * Chat Completion
 */ function chatComplete(client, request, options) {
    return new async_js_1.APIPromise($do(client, request, options));
}
async function $do(client, request, options) {
    const parsed = (0, schemas_js_1.safeParse)(request, (value)=>components.ChatCompletionRequest$outboundSchema.parse(value), "Input validation failed");
    if (!parsed.ok) {
        return [
            parsed,
            {
                status: "invalid"
            }
        ];
    }
    const payload = parsed.value;
    const body = (0, encodings_js_1.encodeJSON)("body", payload, {
        explode: true
    });
    const path = (0, url_js_1.pathToFunc)("/v1/chat/completions")();
    const headers = new Headers((0, primitives_js_1.compactMap)({
        "Content-Type": "application/json",
        Accept: "application/json"
    }));
    const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
    const securityInput = secConfig == null ? {} : {
        apiKey: secConfig
    };
    const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
    const context = {
        baseURL: options?.serverURL ?? client._baseURL ?? "",
        operationID: "chat_completion_v1_chat_completions_post",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: options?.retries || client._options.retryConfig || {
            strategy: "none"
        },
        retryCodes: options?.retryCodes || [
            "429",
            "500",
            "502",
            "503",
            "504"
        ]
    };
    const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "POST",
        baseURL: options?.serverURL,
        path: path,
        headers: headers,
        body: body,
        timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1
    }, options);
    if (!requestRes.ok) {
        return [
            requestRes,
            {
                status: "invalid"
            }
        ];
    }
    const req = requestRes.value;
    const doResult = await client._do(req, {
        context,
        errorCodes: [
            "422",
            "4XX",
            "5XX"
        ],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
    });
    if (!doResult.ok) {
        return [
            doResult,
            {
                status: "request-error",
                request: req
            }
        ];
    }
    const response = doResult.value;
    const responseFields = {
        HttpMeta: {
            Response: response,
            Request: req
        }
    };
    const [result] = await M.match(M.json(200, components.ChatCompletionResponse$inboundSchema), M.jsonErr(422, errors.HTTPValidationError$inboundSchema), M.fail("4XX"), M.fail("5XX"))(response, {
        extraFields: responseFields
    });
    if (!result.ok) {
        return [
            result,
            {
                status: "complete",
                request: req,
                response
            }
        ];
    }
    return [
        result,
        {
            status: "complete",
            request: req,
            response
        }
    ];
} //# sourceMappingURL=chatComplete.js.map
}}),
"[project]/node_modules/@mistralai/mistralai/funcs/chatStream.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */ var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.chatStream = chatStream;
const z = __importStar(__turbopack_context__.r("[project]/node_modules/zod/dist/cjs/index.js [app-route] (ecmascript)"));
const encodings_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/encodings.js [app-route] (ecmascript)");
const event_streams_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/event-streams.js [app-route] (ecmascript)");
const M = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/matchers.js [app-route] (ecmascript)"));
const primitives_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/primitives.js [app-route] (ecmascript)");
const schemas_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/schemas.js [app-route] (ecmascript)");
const security_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/security.js [app-route] (ecmascript)");
const url_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/url.js [app-route] (ecmascript)");
const components = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/components/index.js [app-route] (ecmascript)"));
const errors = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/errors/index.js [app-route] (ecmascript)"));
const async_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/types/async.js [app-route] (ecmascript)");
/**
 * Stream chat completion
 *
 * @remarks
 * Mistral AI provides the ability to stream responses back to a client in order to allow partial results for certain requests. Tokens will be sent as data-only server-sent events as they become available, with the stream terminated by a data: [DONE] message. Otherwise, the server will hold the request open until the timeout or until completion, with the response containing the full result as JSON.
 */ function chatStream(client, request, options) {
    return new async_js_1.APIPromise($do(client, request, options));
}
async function $do(client, request, options) {
    const parsed = (0, schemas_js_1.safeParse)(request, (value)=>components.ChatCompletionStreamRequest$outboundSchema.parse(value), "Input validation failed");
    if (!parsed.ok) {
        return [
            parsed,
            {
                status: "invalid"
            }
        ];
    }
    const payload = parsed.value;
    const body = (0, encodings_js_1.encodeJSON)("body", payload, {
        explode: true
    });
    const path = (0, url_js_1.pathToFunc)("/v1/chat/completions#stream")();
    const headers = new Headers((0, primitives_js_1.compactMap)({
        "Content-Type": "application/json",
        Accept: "text/event-stream"
    }));
    const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
    const securityInput = secConfig == null ? {} : {
        apiKey: secConfig
    };
    const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
    const context = {
        baseURL: options?.serverURL ?? client._baseURL ?? "",
        operationID: "stream_chat",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: options?.retries || client._options.retryConfig || {
            strategy: "none"
        },
        retryCodes: options?.retryCodes || [
            "429",
            "500",
            "502",
            "503",
            "504"
        ]
    };
    const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "POST",
        baseURL: options?.serverURL,
        path: path,
        headers: headers,
        body: body,
        timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1
    }, options);
    if (!requestRes.ok) {
        return [
            requestRes,
            {
                status: "invalid"
            }
        ];
    }
    const req = requestRes.value;
    const doResult = await client._do(req, {
        context,
        errorCodes: [
            "422",
            "4XX",
            "5XX"
        ],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
    });
    if (!doResult.ok) {
        return [
            doResult,
            {
                status: "request-error",
                request: req
            }
        ];
    }
    const response = doResult.value;
    const responseFields = {
        HttpMeta: {
            Response: response,
            Request: req
        }
    };
    const [result] = await M.match(M.sse(200, z.instanceof(ReadableStream).transform((stream)=>{
        return new event_streams_js_1.EventStream({
            stream,
            decoder (rawEvent) {
                const schema = components.CompletionEvent$inboundSchema;
                return schema.parse(rawEvent);
            }
        });
    }), {
        sseSentinel: "[DONE]"
    }), M.jsonErr(422, errors.HTTPValidationError$inboundSchema), M.fail("4XX"), M.fail("5XX"))(response, {
        extraFields: responseFields
    });
    if (!result.ok) {
        return [
            result,
            {
                status: "complete",
                request: req,
                response
            }
        ];
    }
    return [
        result,
        {
            status: "complete",
            request: req,
            response
        }
    ];
} //# sourceMappingURL=chatStream.js.map
}}),
"[project]/node_modules/@mistralai/mistralai/funcs/classifiersClassify.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */ var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.classifiersClassify = classifiersClassify;
const encodings_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/encodings.js [app-route] (ecmascript)");
const M = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/matchers.js [app-route] (ecmascript)"));
const primitives_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/primitives.js [app-route] (ecmascript)");
const schemas_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/schemas.js [app-route] (ecmascript)");
const security_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/security.js [app-route] (ecmascript)");
const url_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/url.js [app-route] (ecmascript)");
const components = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/components/index.js [app-route] (ecmascript)"));
const errors = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/errors/index.js [app-route] (ecmascript)"));
const async_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/types/async.js [app-route] (ecmascript)");
/**
 * Classifications
 */ function classifiersClassify(client, request, options) {
    return new async_js_1.APIPromise($do(client, request, options));
}
async function $do(client, request, options) {
    const parsed = (0, schemas_js_1.safeParse)(request, (value)=>components.ClassificationRequest$outboundSchema.parse(value), "Input validation failed");
    if (!parsed.ok) {
        return [
            parsed,
            {
                status: "invalid"
            }
        ];
    }
    const payload = parsed.value;
    const body = (0, encodings_js_1.encodeJSON)("body", payload, {
        explode: true
    });
    const path = (0, url_js_1.pathToFunc)("/v1/classifications")();
    const headers = new Headers((0, primitives_js_1.compactMap)({
        "Content-Type": "application/json",
        Accept: "application/json"
    }));
    const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
    const securityInput = secConfig == null ? {} : {
        apiKey: secConfig
    };
    const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
    const context = {
        baseURL: options?.serverURL ?? client._baseURL ?? "",
        operationID: "classifications_v1_classifications_post",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: options?.retries || client._options.retryConfig || {
            strategy: "none"
        },
        retryCodes: options?.retryCodes || [
            "429",
            "500",
            "502",
            "503",
            "504"
        ]
    };
    const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "POST",
        baseURL: options?.serverURL,
        path: path,
        headers: headers,
        body: body,
        timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1
    }, options);
    if (!requestRes.ok) {
        return [
            requestRes,
            {
                status: "invalid"
            }
        ];
    }
    const req = requestRes.value;
    const doResult = await client._do(req, {
        context,
        errorCodes: [
            "422",
            "4XX",
            "5XX"
        ],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
    });
    if (!doResult.ok) {
        return [
            doResult,
            {
                status: "request-error",
                request: req
            }
        ];
    }
    const response = doResult.value;
    const responseFields = {
        HttpMeta: {
            Response: response,
            Request: req
        }
    };
    const [result] = await M.match(M.json(200, components.ClassificationResponse$inboundSchema), M.jsonErr(422, errors.HTTPValidationError$inboundSchema), M.fail("4XX"), M.fail("5XX"))(response, {
        extraFields: responseFields
    });
    if (!result.ok) {
        return [
            result,
            {
                status: "complete",
                request: req,
                response
            }
        ];
    }
    return [
        result,
        {
            status: "complete",
            request: req,
            response
        }
    ];
} //# sourceMappingURL=classifiersClassify.js.map
}}),
"[project]/node_modules/@mistralai/mistralai/funcs/classifiersClassifyChat.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */ var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.classifiersClassifyChat = classifiersClassifyChat;
const encodings_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/encodings.js [app-route] (ecmascript)");
const M = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/matchers.js [app-route] (ecmascript)"));
const primitives_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/primitives.js [app-route] (ecmascript)");
const schemas_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/schemas.js [app-route] (ecmascript)");
const security_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/security.js [app-route] (ecmascript)");
const url_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/url.js [app-route] (ecmascript)");
const components = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/components/index.js [app-route] (ecmascript)"));
const errors = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/errors/index.js [app-route] (ecmascript)"));
const async_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/types/async.js [app-route] (ecmascript)");
/**
 * Chat Classifications
 */ function classifiersClassifyChat(client, request, options) {
    return new async_js_1.APIPromise($do(client, request, options));
}
async function $do(client, request, options) {
    const parsed = (0, schemas_js_1.safeParse)(request, (value)=>components.ChatClassificationRequest$outboundSchema.parse(value), "Input validation failed");
    if (!parsed.ok) {
        return [
            parsed,
            {
                status: "invalid"
            }
        ];
    }
    const payload = parsed.value;
    const body = (0, encodings_js_1.encodeJSON)("body", payload, {
        explode: true
    });
    const path = (0, url_js_1.pathToFunc)("/v1/chat/classifications")();
    const headers = new Headers((0, primitives_js_1.compactMap)({
        "Content-Type": "application/json",
        Accept: "application/json"
    }));
    const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
    const securityInput = secConfig == null ? {} : {
        apiKey: secConfig
    };
    const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
    const context = {
        baseURL: options?.serverURL ?? client._baseURL ?? "",
        operationID: "chat_classifications_v1_chat_classifications_post",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: options?.retries || client._options.retryConfig || {
            strategy: "none"
        },
        retryCodes: options?.retryCodes || [
            "429",
            "500",
            "502",
            "503",
            "504"
        ]
    };
    const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "POST",
        baseURL: options?.serverURL,
        path: path,
        headers: headers,
        body: body,
        timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1
    }, options);
    if (!requestRes.ok) {
        return [
            requestRes,
            {
                status: "invalid"
            }
        ];
    }
    const req = requestRes.value;
    const doResult = await client._do(req, {
        context,
        errorCodes: [
            "422",
            "4XX",
            "5XX"
        ],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
    });
    if (!doResult.ok) {
        return [
            doResult,
            {
                status: "request-error",
                request: req
            }
        ];
    }
    const response = doResult.value;
    const responseFields = {
        HttpMeta: {
            Response: response,
            Request: req
        }
    };
    const [result] = await M.match(M.json(200, components.ClassificationResponse$inboundSchema), M.jsonErr(422, errors.HTTPValidationError$inboundSchema), M.fail("4XX"), M.fail("5XX"))(response, {
        extraFields: responseFields
    });
    if (!result.ok) {
        return [
            result,
            {
                status: "complete",
                request: req,
                response
            }
        ];
    }
    return [
        result,
        {
            status: "complete",
            request: req,
            response
        }
    ];
} //# sourceMappingURL=classifiersClassifyChat.js.map
}}),
"[project]/node_modules/@mistralai/mistralai/funcs/classifiersModerate.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */ var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.classifiersModerate = classifiersModerate;
const encodings_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/encodings.js [app-route] (ecmascript)");
const M = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/matchers.js [app-route] (ecmascript)"));
const primitives_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/primitives.js [app-route] (ecmascript)");
const schemas_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/schemas.js [app-route] (ecmascript)");
const security_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/security.js [app-route] (ecmascript)");
const url_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/url.js [app-route] (ecmascript)");
const components = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/components/index.js [app-route] (ecmascript)"));
const errors = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/errors/index.js [app-route] (ecmascript)"));
const async_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/types/async.js [app-route] (ecmascript)");
/**
 * Moderations
 */ function classifiersModerate(client, request, options) {
    return new async_js_1.APIPromise($do(client, request, options));
}
async function $do(client, request, options) {
    const parsed = (0, schemas_js_1.safeParse)(request, (value)=>components.ClassificationRequest$outboundSchema.parse(value), "Input validation failed");
    if (!parsed.ok) {
        return [
            parsed,
            {
                status: "invalid"
            }
        ];
    }
    const payload = parsed.value;
    const body = (0, encodings_js_1.encodeJSON)("body", payload, {
        explode: true
    });
    const path = (0, url_js_1.pathToFunc)("/v1/moderations")();
    const headers = new Headers((0, primitives_js_1.compactMap)({
        "Content-Type": "application/json",
        Accept: "application/json"
    }));
    const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
    const securityInput = secConfig == null ? {} : {
        apiKey: secConfig
    };
    const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
    const context = {
        baseURL: options?.serverURL ?? client._baseURL ?? "",
        operationID: "moderations_v1_moderations_post",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: options?.retries || client._options.retryConfig || {
            strategy: "none"
        },
        retryCodes: options?.retryCodes || [
            "429",
            "500",
            "502",
            "503",
            "504"
        ]
    };
    const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "POST",
        baseURL: options?.serverURL,
        path: path,
        headers: headers,
        body: body,
        timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1
    }, options);
    if (!requestRes.ok) {
        return [
            requestRes,
            {
                status: "invalid"
            }
        ];
    }
    const req = requestRes.value;
    const doResult = await client._do(req, {
        context,
        errorCodes: [
            "422",
            "4XX",
            "5XX"
        ],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
    });
    if (!doResult.ok) {
        return [
            doResult,
            {
                status: "request-error",
                request: req
            }
        ];
    }
    const response = doResult.value;
    const responseFields = {
        HttpMeta: {
            Response: response,
            Request: req
        }
    };
    const [result] = await M.match(M.json(200, components.ModerationResponse$inboundSchema), M.jsonErr(422, errors.HTTPValidationError$inboundSchema), M.fail("4XX"), M.fail("5XX"))(response, {
        extraFields: responseFields
    });
    if (!result.ok) {
        return [
            result,
            {
                status: "complete",
                request: req,
                response
            }
        ];
    }
    return [
        result,
        {
            status: "complete",
            request: req,
            response
        }
    ];
} //# sourceMappingURL=classifiersModerate.js.map
}}),
"[project]/node_modules/@mistralai/mistralai/funcs/classifiersModerateChat.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */ var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.classifiersModerateChat = classifiersModerateChat;
const encodings_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/encodings.js [app-route] (ecmascript)");
const M = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/matchers.js [app-route] (ecmascript)"));
const primitives_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/primitives.js [app-route] (ecmascript)");
const schemas_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/schemas.js [app-route] (ecmascript)");
const security_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/security.js [app-route] (ecmascript)");
const url_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/url.js [app-route] (ecmascript)");
const components = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/components/index.js [app-route] (ecmascript)"));
const errors = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/errors/index.js [app-route] (ecmascript)"));
const async_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/types/async.js [app-route] (ecmascript)");
/**
 * Chat Moderations
 */ function classifiersModerateChat(client, request, options) {
    return new async_js_1.APIPromise($do(client, request, options));
}
async function $do(client, request, options) {
    const parsed = (0, schemas_js_1.safeParse)(request, (value)=>components.ChatModerationRequest$outboundSchema.parse(value), "Input validation failed");
    if (!parsed.ok) {
        return [
            parsed,
            {
                status: "invalid"
            }
        ];
    }
    const payload = parsed.value;
    const body = (0, encodings_js_1.encodeJSON)("body", payload, {
        explode: true
    });
    const path = (0, url_js_1.pathToFunc)("/v1/chat/moderations")();
    const headers = new Headers((0, primitives_js_1.compactMap)({
        "Content-Type": "application/json",
        Accept: "application/json"
    }));
    const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
    const securityInput = secConfig == null ? {} : {
        apiKey: secConfig
    };
    const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
    const context = {
        baseURL: options?.serverURL ?? client._baseURL ?? "",
        operationID: "chat_moderations_v1_chat_moderations_post",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: options?.retries || client._options.retryConfig || {
            strategy: "none"
        },
        retryCodes: options?.retryCodes || [
            "429",
            "500",
            "502",
            "503",
            "504"
        ]
    };
    const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "POST",
        baseURL: options?.serverURL,
        path: path,
        headers: headers,
        body: body,
        timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1
    }, options);
    if (!requestRes.ok) {
        return [
            requestRes,
            {
                status: "invalid"
            }
        ];
    }
    const req = requestRes.value;
    const doResult = await client._do(req, {
        context,
        errorCodes: [
            "422",
            "4XX",
            "5XX"
        ],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
    });
    if (!doResult.ok) {
        return [
            doResult,
            {
                status: "request-error",
                request: req
            }
        ];
    }
    const response = doResult.value;
    const responseFields = {
        HttpMeta: {
            Response: response,
            Request: req
        }
    };
    const [result] = await M.match(M.json(200, components.ModerationResponse$inboundSchema), M.jsonErr(422, errors.HTTPValidationError$inboundSchema), M.fail("4XX"), M.fail("5XX"))(response, {
        extraFields: responseFields
    });
    if (!result.ok) {
        return [
            result,
            {
                status: "complete",
                request: req,
                response
            }
        ];
    }
    return [
        result,
        {
            status: "complete",
            request: req,
            response
        }
    ];
} //# sourceMappingURL=classifiersModerateChat.js.map
}}),
"[project]/node_modules/@mistralai/mistralai/funcs/embeddingsCreate.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */ var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.embeddingsCreate = embeddingsCreate;
const encodings_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/encodings.js [app-route] (ecmascript)");
const M = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/matchers.js [app-route] (ecmascript)"));
const primitives_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/primitives.js [app-route] (ecmascript)");
const schemas_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/schemas.js [app-route] (ecmascript)");
const security_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/security.js [app-route] (ecmascript)");
const url_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/url.js [app-route] (ecmascript)");
const components = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/components/index.js [app-route] (ecmascript)"));
const errors = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/errors/index.js [app-route] (ecmascript)"));
const async_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/types/async.js [app-route] (ecmascript)");
/**
 * Embeddings
 *
 * @remarks
 * Embeddings
 */ function embeddingsCreate(client, request, options) {
    return new async_js_1.APIPromise($do(client, request, options));
}
async function $do(client, request, options) {
    const parsed = (0, schemas_js_1.safeParse)(request, (value)=>components.EmbeddingRequest$outboundSchema.parse(value), "Input validation failed");
    if (!parsed.ok) {
        return [
            parsed,
            {
                status: "invalid"
            }
        ];
    }
    const payload = parsed.value;
    const body = (0, encodings_js_1.encodeJSON)("body", payload, {
        explode: true
    });
    const path = (0, url_js_1.pathToFunc)("/v1/embeddings")();
    const headers = new Headers((0, primitives_js_1.compactMap)({
        "Content-Type": "application/json",
        Accept: "application/json"
    }));
    const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
    const securityInput = secConfig == null ? {} : {
        apiKey: secConfig
    };
    const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
    const context = {
        baseURL: options?.serverURL ?? client._baseURL ?? "",
        operationID: "embeddings_v1_embeddings_post",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: options?.retries || client._options.retryConfig || {
            strategy: "none"
        },
        retryCodes: options?.retryCodes || [
            "429",
            "500",
            "502",
            "503",
            "504"
        ]
    };
    const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "POST",
        baseURL: options?.serverURL,
        path: path,
        headers: headers,
        body: body,
        timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1
    }, options);
    if (!requestRes.ok) {
        return [
            requestRes,
            {
                status: "invalid"
            }
        ];
    }
    const req = requestRes.value;
    const doResult = await client._do(req, {
        context,
        errorCodes: [
            "422",
            "4XX",
            "5XX"
        ],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
    });
    if (!doResult.ok) {
        return [
            doResult,
            {
                status: "request-error",
                request: req
            }
        ];
    }
    const response = doResult.value;
    const responseFields = {
        HttpMeta: {
            Response: response,
            Request: req
        }
    };
    const [result] = await M.match(M.json(200, components.EmbeddingResponse$inboundSchema), M.jsonErr(422, errors.HTTPValidationError$inboundSchema), M.fail("4XX"), M.fail("5XX"))(response, {
        extraFields: responseFields
    });
    if (!result.ok) {
        return [
            result,
            {
                status: "complete",
                request: req,
                response
            }
        ];
    }
    return [
        result,
        {
            status: "complete",
            request: req,
            response
        }
    ];
} //# sourceMappingURL=embeddingsCreate.js.map
}}),
"[project]/node_modules/@mistralai/mistralai/funcs/filesDelete.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */ var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.filesDelete = filesDelete;
const encodings_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/encodings.js [app-route] (ecmascript)");
const M = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/matchers.js [app-route] (ecmascript)"));
const primitives_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/primitives.js [app-route] (ecmascript)");
const schemas_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/schemas.js [app-route] (ecmascript)");
const security_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/security.js [app-route] (ecmascript)");
const url_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/url.js [app-route] (ecmascript)");
const components = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/components/index.js [app-route] (ecmascript)"));
const operations = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/operations/index.js [app-route] (ecmascript)"));
const async_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/types/async.js [app-route] (ecmascript)");
/**
 * Delete File
 *
 * @remarks
 * Delete a file.
 */ function filesDelete(client, request, options) {
    return new async_js_1.APIPromise($do(client, request, options));
}
async function $do(client, request, options) {
    const parsed = (0, schemas_js_1.safeParse)(request, (value)=>operations.FilesApiRoutesDeleteFileRequest$outboundSchema.parse(value), "Input validation failed");
    if (!parsed.ok) {
        return [
            parsed,
            {
                status: "invalid"
            }
        ];
    }
    const payload = parsed.value;
    const body = null;
    const pathParams = {
        file_id: (0, encodings_js_1.encodeSimple)("file_id", payload.file_id, {
            explode: false,
            charEncoding: "percent"
        })
    };
    const path = (0, url_js_1.pathToFunc)("/v1/files/{file_id}")(pathParams);
    const headers = new Headers((0, primitives_js_1.compactMap)({
        Accept: "application/json"
    }));
    const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
    const securityInput = secConfig == null ? {} : {
        apiKey: secConfig
    };
    const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
    const context = {
        baseURL: options?.serverURL ?? client._baseURL ?? "",
        operationID: "files_api_routes_delete_file",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: options?.retries || client._options.retryConfig || {
            strategy: "none"
        },
        retryCodes: options?.retryCodes || [
            "429",
            "500",
            "502",
            "503",
            "504"
        ]
    };
    const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "DELETE",
        baseURL: options?.serverURL,
        path: path,
        headers: headers,
        body: body,
        timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1
    }, options);
    if (!requestRes.ok) {
        return [
            requestRes,
            {
                status: "invalid"
            }
        ];
    }
    const req = requestRes.value;
    const doResult = await client._do(req, {
        context,
        errorCodes: [
            "4XX",
            "5XX"
        ],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
    });
    if (!doResult.ok) {
        return [
            doResult,
            {
                status: "request-error",
                request: req
            }
        ];
    }
    const response = doResult.value;
    const [result] = await M.match(M.json(200, components.DeleteFileOut$inboundSchema), M.fail("4XX"), M.fail("5XX"))(response);
    if (!result.ok) {
        return [
            result,
            {
                status: "complete",
                request: req,
                response
            }
        ];
    }
    return [
        result,
        {
            status: "complete",
            request: req,
            response
        }
    ];
} //# sourceMappingURL=filesDelete.js.map
}}),
"[project]/node_modules/@mistralai/mistralai/funcs/filesDownload.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */ var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.filesDownload = filesDownload;
const z = __importStar(__turbopack_context__.r("[project]/node_modules/zod/dist/cjs/index.js [app-route] (ecmascript)"));
const encodings_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/encodings.js [app-route] (ecmascript)");
const M = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/matchers.js [app-route] (ecmascript)"));
const primitives_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/primitives.js [app-route] (ecmascript)");
const schemas_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/schemas.js [app-route] (ecmascript)");
const security_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/security.js [app-route] (ecmascript)");
const url_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/url.js [app-route] (ecmascript)");
const operations = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/operations/index.js [app-route] (ecmascript)"));
const async_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/types/async.js [app-route] (ecmascript)");
/**
 * Download File
 *
 * @remarks
 * Download a file
 */ function filesDownload(client, request, options) {
    return new async_js_1.APIPromise($do(client, request, options));
}
async function $do(client, request, options) {
    const parsed = (0, schemas_js_1.safeParse)(request, (value)=>operations.FilesApiRoutesDownloadFileRequest$outboundSchema.parse(value), "Input validation failed");
    if (!parsed.ok) {
        return [
            parsed,
            {
                status: "invalid"
            }
        ];
    }
    const payload = parsed.value;
    const body = null;
    const pathParams = {
        file_id: (0, encodings_js_1.encodeSimple)("file_id", payload.file_id, {
            explode: false,
            charEncoding: "percent"
        })
    };
    const path = (0, url_js_1.pathToFunc)("/v1/files/{file_id}/content")(pathParams);
    const headers = new Headers((0, primitives_js_1.compactMap)({
        Accept: "application/octet-stream"
    }));
    const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
    const securityInput = secConfig == null ? {} : {
        apiKey: secConfig
    };
    const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
    const context = {
        baseURL: options?.serverURL ?? client._baseURL ?? "",
        operationID: "files_api_routes_download_file",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: options?.retries || client._options.retryConfig || {
            strategy: "none"
        },
        retryCodes: options?.retryCodes || [
            "429",
            "500",
            "502",
            "503",
            "504"
        ]
    };
    const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "GET",
        baseURL: options?.serverURL,
        path: path,
        headers: headers,
        body: body,
        timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1
    }, options);
    if (!requestRes.ok) {
        return [
            requestRes,
            {
                status: "invalid"
            }
        ];
    }
    const req = requestRes.value;
    const doResult = await client._do(req, {
        context,
        errorCodes: [
            "4XX",
            "5XX"
        ],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
    });
    if (!doResult.ok) {
        return [
            doResult,
            {
                status: "request-error",
                request: req
            }
        ];
    }
    const response = doResult.value;
    const [result] = await M.match(M.stream(200, z.instanceof(ReadableStream)), M.fail("4XX"), M.fail("5XX"))(response);
    if (!result.ok) {
        return [
            result,
            {
                status: "complete",
                request: req,
                response
            }
        ];
    }
    return [
        result,
        {
            status: "complete",
            request: req,
            response
        }
    ];
} //# sourceMappingURL=filesDownload.js.map
}}),
"[project]/node_modules/@mistralai/mistralai/funcs/filesGetSignedUrl.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */ var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.filesGetSignedUrl = filesGetSignedUrl;
const encodings_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/encodings.js [app-route] (ecmascript)");
const M = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/matchers.js [app-route] (ecmascript)"));
const primitives_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/primitives.js [app-route] (ecmascript)");
const schemas_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/schemas.js [app-route] (ecmascript)");
const security_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/security.js [app-route] (ecmascript)");
const url_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/url.js [app-route] (ecmascript)");
const components = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/components/index.js [app-route] (ecmascript)"));
const operations = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/operations/index.js [app-route] (ecmascript)"));
const async_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/types/async.js [app-route] (ecmascript)");
/**
 * Get Signed Url
 */ function filesGetSignedUrl(client, request, options) {
    return new async_js_1.APIPromise($do(client, request, options));
}
async function $do(client, request, options) {
    const parsed = (0, schemas_js_1.safeParse)(request, (value)=>operations.FilesApiRoutesGetSignedUrlRequest$outboundSchema.parse(value), "Input validation failed");
    if (!parsed.ok) {
        return [
            parsed,
            {
                status: "invalid"
            }
        ];
    }
    const payload = parsed.value;
    const body = null;
    const pathParams = {
        file_id: (0, encodings_js_1.encodeSimple)("file_id", payload.file_id, {
            explode: false,
            charEncoding: "percent"
        })
    };
    const path = (0, url_js_1.pathToFunc)("/v1/files/{file_id}/url")(pathParams);
    const query = (0, encodings_js_1.encodeFormQuery)({
        "expiry": payload.expiry
    });
    const headers = new Headers((0, primitives_js_1.compactMap)({
        Accept: "application/json"
    }));
    const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
    const securityInput = secConfig == null ? {} : {
        apiKey: secConfig
    };
    const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
    const context = {
        baseURL: options?.serverURL ?? client._baseURL ?? "",
        operationID: "files_api_routes_get_signed_url",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: options?.retries || client._options.retryConfig || {
            strategy: "none"
        },
        retryCodes: options?.retryCodes || [
            "429",
            "500",
            "502",
            "503",
            "504"
        ]
    };
    const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "GET",
        baseURL: options?.serverURL,
        path: path,
        headers: headers,
        query: query,
        body: body,
        timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1
    }, options);
    if (!requestRes.ok) {
        return [
            requestRes,
            {
                status: "invalid"
            }
        ];
    }
    const req = requestRes.value;
    const doResult = await client._do(req, {
        context,
        errorCodes: [
            "4XX",
            "5XX"
        ],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
    });
    if (!doResult.ok) {
        return [
            doResult,
            {
                status: "request-error",
                request: req
            }
        ];
    }
    const response = doResult.value;
    const [result] = await M.match(M.json(200, components.FileSignedURL$inboundSchema), M.fail("4XX"), M.fail("5XX"))(response);
    if (!result.ok) {
        return [
            result,
            {
                status: "complete",
                request: req,
                response
            }
        ];
    }
    return [
        result,
        {
            status: "complete",
            request: req,
            response
        }
    ];
} //# sourceMappingURL=filesGetSignedUrl.js.map
}}),
"[project]/node_modules/@mistralai/mistralai/funcs/filesList.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */ var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.filesList = filesList;
const encodings_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/encodings.js [app-route] (ecmascript)");
const M = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/matchers.js [app-route] (ecmascript)"));
const primitives_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/primitives.js [app-route] (ecmascript)");
const schemas_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/schemas.js [app-route] (ecmascript)");
const security_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/security.js [app-route] (ecmascript)");
const url_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/url.js [app-route] (ecmascript)");
const components = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/components/index.js [app-route] (ecmascript)"));
const operations = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/operations/index.js [app-route] (ecmascript)"));
const async_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/types/async.js [app-route] (ecmascript)");
/**
 * List Files
 *
 * @remarks
 * Returns a list of files that belong to the user's organization.
 */ function filesList(client, request, options) {
    return new async_js_1.APIPromise($do(client, request, options));
}
async function $do(client, request, options) {
    const parsed = (0, schemas_js_1.safeParse)(request, (value)=>operations.FilesApiRoutesListFilesRequest$outboundSchema.optional().parse(value), "Input validation failed");
    if (!parsed.ok) {
        return [
            parsed,
            {
                status: "invalid"
            }
        ];
    }
    const payload = parsed.value;
    const body = null;
    const path = (0, url_js_1.pathToFunc)("/v1/files")();
    const query = (0, encodings_js_1.encodeFormQuery)({
        "page": payload?.page,
        "page_size": payload?.page_size,
        "purpose": payload?.purpose,
        "sample_type": payload?.sample_type,
        "search": payload?.search,
        "source": payload?.source
    });
    const headers = new Headers((0, primitives_js_1.compactMap)({
        Accept: "application/json"
    }));
    const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
    const securityInput = secConfig == null ? {} : {
        apiKey: secConfig
    };
    const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
    const context = {
        baseURL: options?.serverURL ?? client._baseURL ?? "",
        operationID: "files_api_routes_list_files",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: options?.retries || client._options.retryConfig || {
            strategy: "none"
        },
        retryCodes: options?.retryCodes || [
            "429",
            "500",
            "502",
            "503",
            "504"
        ]
    };
    const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "GET",
        baseURL: options?.serverURL,
        path: path,
        headers: headers,
        query: query,
        body: body,
        timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1
    }, options);
    if (!requestRes.ok) {
        return [
            requestRes,
            {
                status: "invalid"
            }
        ];
    }
    const req = requestRes.value;
    const doResult = await client._do(req, {
        context,
        errorCodes: [
            "4XX",
            "5XX"
        ],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
    });
    if (!doResult.ok) {
        return [
            doResult,
            {
                status: "request-error",
                request: req
            }
        ];
    }
    const response = doResult.value;
    const [result] = await M.match(M.json(200, components.ListFilesOut$inboundSchema), M.fail("4XX"), M.fail("5XX"))(response);
    if (!result.ok) {
        return [
            result,
            {
                status: "complete",
                request: req,
                response
            }
        ];
    }
    return [
        result,
        {
            status: "complete",
            request: req,
            response
        }
    ];
} //# sourceMappingURL=filesList.js.map
}}),
"[project]/node_modules/@mistralai/mistralai/funcs/filesRetrieve.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */ var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.filesRetrieve = filesRetrieve;
const encodings_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/encodings.js [app-route] (ecmascript)");
const M = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/matchers.js [app-route] (ecmascript)"));
const primitives_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/primitives.js [app-route] (ecmascript)");
const schemas_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/schemas.js [app-route] (ecmascript)");
const security_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/security.js [app-route] (ecmascript)");
const url_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/url.js [app-route] (ecmascript)");
const components = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/components/index.js [app-route] (ecmascript)"));
const operations = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/operations/index.js [app-route] (ecmascript)"));
const async_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/types/async.js [app-route] (ecmascript)");
/**
 * Retrieve File
 *
 * @remarks
 * Returns information about a specific file.
 */ function filesRetrieve(client, request, options) {
    return new async_js_1.APIPromise($do(client, request, options));
}
async function $do(client, request, options) {
    const parsed = (0, schemas_js_1.safeParse)(request, (value)=>operations.FilesApiRoutesRetrieveFileRequest$outboundSchema.parse(value), "Input validation failed");
    if (!parsed.ok) {
        return [
            parsed,
            {
                status: "invalid"
            }
        ];
    }
    const payload = parsed.value;
    const body = null;
    const pathParams = {
        file_id: (0, encodings_js_1.encodeSimple)("file_id", payload.file_id, {
            explode: false,
            charEncoding: "percent"
        })
    };
    const path = (0, url_js_1.pathToFunc)("/v1/files/{file_id}")(pathParams);
    const headers = new Headers((0, primitives_js_1.compactMap)({
        Accept: "application/json"
    }));
    const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
    const securityInput = secConfig == null ? {} : {
        apiKey: secConfig
    };
    const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
    const context = {
        baseURL: options?.serverURL ?? client._baseURL ?? "",
        operationID: "files_api_routes_retrieve_file",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: options?.retries || client._options.retryConfig || {
            strategy: "none"
        },
        retryCodes: options?.retryCodes || [
            "429",
            "500",
            "502",
            "503",
            "504"
        ]
    };
    const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "GET",
        baseURL: options?.serverURL,
        path: path,
        headers: headers,
        body: body,
        timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1
    }, options);
    if (!requestRes.ok) {
        return [
            requestRes,
            {
                status: "invalid"
            }
        ];
    }
    const req = requestRes.value;
    const doResult = await client._do(req, {
        context,
        errorCodes: [
            "4XX",
            "5XX"
        ],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
    });
    if (!doResult.ok) {
        return [
            doResult,
            {
                status: "request-error",
                request: req
            }
        ];
    }
    const response = doResult.value;
    const [result] = await M.match(M.json(200, components.RetrieveFileOut$inboundSchema), M.fail("4XX"), M.fail("5XX"))(response);
    if (!result.ok) {
        return [
            result,
            {
                status: "complete",
                request: req,
                response
            }
        ];
    }
    return [
        result,
        {
            status: "complete",
            request: req,
            response
        }
    ];
} //# sourceMappingURL=filesRetrieve.js.map
}}),
"[project]/node_modules/@mistralai/mistralai/funcs/filesUpload.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */ var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.filesUpload = filesUpload;
const encodings_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/encodings.js [app-route] (ecmascript)");
const files_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/files.js [app-route] (ecmascript)");
const M = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/matchers.js [app-route] (ecmascript)"));
const primitives_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/primitives.js [app-route] (ecmascript)");
const schemas_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/schemas.js [app-route] (ecmascript)");
const security_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/security.js [app-route] (ecmascript)");
const url_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/url.js [app-route] (ecmascript)");
const components = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/components/index.js [app-route] (ecmascript)"));
const operations = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/operations/index.js [app-route] (ecmascript)"));
const async_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/types/async.js [app-route] (ecmascript)");
const blobs_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/types/blobs.js [app-route] (ecmascript)");
const streams_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/types/streams.js [app-route] (ecmascript)");
/**
 * Upload File
 *
 * @remarks
 * Upload a file that can be used across various endpoints.
 *
 * The size of individual files can be a maximum of 512 MB. The Fine-tuning API only supports .jsonl files.
 *
 * Please contact us if you need to increase these storage limits.
 */ function filesUpload(client, request, options) {
    return new async_js_1.APIPromise($do(client, request, options));
}
async function $do(client, request, options) {
    const parsed = (0, schemas_js_1.safeParse)(request, (value)=>operations.FilesApiRoutesUploadFileMultiPartBodyParams$outboundSchema.parse(value), "Input validation failed");
    if (!parsed.ok) {
        return [
            parsed,
            {
                status: "invalid"
            }
        ];
    }
    const payload = parsed.value;
    const body = new FormData();
    if ((0, blobs_js_1.isBlobLike)(payload.file)) {
        (0, encodings_js_1.appendForm)(body, "file", payload.file);
    } else if ((0, streams_js_1.isReadableStream)(payload.file.content)) {
        const buffer = await (0, files_js_1.readableStreamToArrayBuffer)(payload.file.content);
        const blob = new Blob([
            buffer
        ], {
            type: "application/octet-stream"
        });
        (0, encodings_js_1.appendForm)(body, "file", blob);
    } else {
        (0, encodings_js_1.appendForm)(body, "file", new Blob([
            payload.file.content
        ], {
            type: "application/octet-stream"
        }), payload.file.fileName);
    }
    if (payload.purpose !== undefined) {
        (0, encodings_js_1.appendForm)(body, "purpose", payload.purpose);
    }
    const path = (0, url_js_1.pathToFunc)("/v1/files")();
    const headers = new Headers((0, primitives_js_1.compactMap)({
        Accept: "application/json"
    }));
    const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
    const securityInput = secConfig == null ? {} : {
        apiKey: secConfig
    };
    const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
    const context = {
        baseURL: options?.serverURL ?? client._baseURL ?? "",
        operationID: "files_api_routes_upload_file",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: options?.retries || client._options.retryConfig || {
            strategy: "none"
        },
        retryCodes: options?.retryCodes || [
            "429",
            "500",
            "502",
            "503",
            "504"
        ]
    };
    const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "POST",
        baseURL: options?.serverURL,
        path: path,
        headers: headers,
        body: body,
        timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1
    }, options);
    if (!requestRes.ok) {
        return [
            requestRes,
            {
                status: "invalid"
            }
        ];
    }
    const req = requestRes.value;
    const doResult = await client._do(req, {
        context,
        errorCodes: [
            "4XX",
            "5XX"
        ],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
    });
    if (!doResult.ok) {
        return [
            doResult,
            {
                status: "request-error",
                request: req
            }
        ];
    }
    const response = doResult.value;
    const [result] = await M.match(M.json(200, components.UploadFileOut$inboundSchema), M.fail("4XX"), M.fail("5XX"))(response);
    if (!result.ok) {
        return [
            result,
            {
                status: "complete",
                request: req,
                response
            }
        ];
    }
    return [
        result,
        {
            status: "complete",
            request: req,
            response
        }
    ];
} //# sourceMappingURL=filesUpload.js.map
}}),
"[project]/node_modules/@mistralai/mistralai/funcs/fimComplete.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */ var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.fimComplete = fimComplete;
const encodings_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/encodings.js [app-route] (ecmascript)");
const M = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/matchers.js [app-route] (ecmascript)"));
const primitives_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/primitives.js [app-route] (ecmascript)");
const schemas_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/schemas.js [app-route] (ecmascript)");
const security_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/security.js [app-route] (ecmascript)");
const url_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/url.js [app-route] (ecmascript)");
const components = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/components/index.js [app-route] (ecmascript)"));
const errors = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/errors/index.js [app-route] (ecmascript)"));
const async_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/types/async.js [app-route] (ecmascript)");
/**
 * Fim Completion
 *
 * @remarks
 * FIM completion.
 */ function fimComplete(client, request, options) {
    return new async_js_1.APIPromise($do(client, request, options));
}
async function $do(client, request, options) {
    const parsed = (0, schemas_js_1.safeParse)(request, (value)=>components.FIMCompletionRequest$outboundSchema.parse(value), "Input validation failed");
    if (!parsed.ok) {
        return [
            parsed,
            {
                status: "invalid"
            }
        ];
    }
    const payload = parsed.value;
    const body = (0, encodings_js_1.encodeJSON)("body", payload, {
        explode: true
    });
    const path = (0, url_js_1.pathToFunc)("/v1/fim/completions")();
    const headers = new Headers((0, primitives_js_1.compactMap)({
        "Content-Type": "application/json",
        Accept: "application/json"
    }));
    const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
    const securityInput = secConfig == null ? {} : {
        apiKey: secConfig
    };
    const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
    const context = {
        baseURL: options?.serverURL ?? client._baseURL ?? "",
        operationID: "fim_completion_v1_fim_completions_post",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: options?.retries || client._options.retryConfig || {
            strategy: "none"
        },
        retryCodes: options?.retryCodes || [
            "429",
            "500",
            "502",
            "503",
            "504"
        ]
    };
    const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "POST",
        baseURL: options?.serverURL,
        path: path,
        headers: headers,
        body: body,
        timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1
    }, options);
    if (!requestRes.ok) {
        return [
            requestRes,
            {
                status: "invalid"
            }
        ];
    }
    const req = requestRes.value;
    const doResult = await client._do(req, {
        context,
        errorCodes: [
            "422",
            "4XX",
            "5XX"
        ],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
    });
    if (!doResult.ok) {
        return [
            doResult,
            {
                status: "request-error",
                request: req
            }
        ];
    }
    const response = doResult.value;
    const responseFields = {
        HttpMeta: {
            Response: response,
            Request: req
        }
    };
    const [result] = await M.match(M.json(200, components.FIMCompletionResponse$inboundSchema), M.jsonErr(422, errors.HTTPValidationError$inboundSchema), M.fail("4XX"), M.fail("5XX"))(response, {
        extraFields: responseFields
    });
    if (!result.ok) {
        return [
            result,
            {
                status: "complete",
                request: req,
                response
            }
        ];
    }
    return [
        result,
        {
            status: "complete",
            request: req,
            response
        }
    ];
} //# sourceMappingURL=fimComplete.js.map
}}),
"[project]/node_modules/@mistralai/mistralai/funcs/fimStream.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */ var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.fimStream = fimStream;
const z = __importStar(__turbopack_context__.r("[project]/node_modules/zod/dist/cjs/index.js [app-route] (ecmascript)"));
const encodings_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/encodings.js [app-route] (ecmascript)");
const event_streams_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/event-streams.js [app-route] (ecmascript)");
const M = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/matchers.js [app-route] (ecmascript)"));
const primitives_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/primitives.js [app-route] (ecmascript)");
const schemas_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/schemas.js [app-route] (ecmascript)");
const security_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/security.js [app-route] (ecmascript)");
const url_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/url.js [app-route] (ecmascript)");
const components = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/components/index.js [app-route] (ecmascript)"));
const errors = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/errors/index.js [app-route] (ecmascript)"));
const async_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/types/async.js [app-route] (ecmascript)");
/**
 * Stream fim completion
 *
 * @remarks
 * Mistral AI provides the ability to stream responses back to a client in order to allow partial results for certain requests. Tokens will be sent as data-only server-sent events as they become available, with the stream terminated by a data: [DONE] message. Otherwise, the server will hold the request open until the timeout or until completion, with the response containing the full result as JSON.
 */ function fimStream(client, request, options) {
    return new async_js_1.APIPromise($do(client, request, options));
}
async function $do(client, request, options) {
    const parsed = (0, schemas_js_1.safeParse)(request, (value)=>components.FIMCompletionStreamRequest$outboundSchema.parse(value), "Input validation failed");
    if (!parsed.ok) {
        return [
            parsed,
            {
                status: "invalid"
            }
        ];
    }
    const payload = parsed.value;
    const body = (0, encodings_js_1.encodeJSON)("body", payload, {
        explode: true
    });
    const path = (0, url_js_1.pathToFunc)("/v1/fim/completions#stream")();
    const headers = new Headers((0, primitives_js_1.compactMap)({
        "Content-Type": "application/json",
        Accept: "text/event-stream"
    }));
    const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
    const securityInput = secConfig == null ? {} : {
        apiKey: secConfig
    };
    const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
    const context = {
        baseURL: options?.serverURL ?? client._baseURL ?? "",
        operationID: "stream_fim",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: options?.retries || client._options.retryConfig || {
            strategy: "none"
        },
        retryCodes: options?.retryCodes || [
            "429",
            "500",
            "502",
            "503",
            "504"
        ]
    };
    const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "POST",
        baseURL: options?.serverURL,
        path: path,
        headers: headers,
        body: body,
        timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1
    }, options);
    if (!requestRes.ok) {
        return [
            requestRes,
            {
                status: "invalid"
            }
        ];
    }
    const req = requestRes.value;
    const doResult = await client._do(req, {
        context,
        errorCodes: [
            "422",
            "4XX",
            "5XX"
        ],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
    });
    if (!doResult.ok) {
        return [
            doResult,
            {
                status: "request-error",
                request: req
            }
        ];
    }
    const response = doResult.value;
    const responseFields = {
        HttpMeta: {
            Response: response,
            Request: req
        }
    };
    const [result] = await M.match(M.sse(200, z.instanceof(ReadableStream).transform((stream)=>{
        return new event_streams_js_1.EventStream({
            stream,
            decoder (rawEvent) {
                const schema = components.CompletionEvent$inboundSchema;
                return schema.parse(rawEvent);
            }
        });
    }), {
        sseSentinel: "[DONE]"
    }), M.jsonErr(422, errors.HTTPValidationError$inboundSchema), M.fail("4XX"), M.fail("5XX"))(response, {
        extraFields: responseFields
    });
    if (!result.ok) {
        return [
            result,
            {
                status: "complete",
                request: req,
                response
            }
        ];
    }
    return [
        result,
        {
            status: "complete",
            request: req,
            response
        }
    ];
} //# sourceMappingURL=fimStream.js.map
}}),
"[project]/node_modules/@mistralai/mistralai/funcs/fineTuningJobsCancel.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */ var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.fineTuningJobsCancel = fineTuningJobsCancel;
const encodings_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/encodings.js [app-route] (ecmascript)");
const M = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/matchers.js [app-route] (ecmascript)"));
const primitives_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/primitives.js [app-route] (ecmascript)");
const schemas_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/schemas.js [app-route] (ecmascript)");
const security_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/security.js [app-route] (ecmascript)");
const url_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/url.js [app-route] (ecmascript)");
const operations = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/operations/index.js [app-route] (ecmascript)"));
const async_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/types/async.js [app-route] (ecmascript)");
/**
 * Cancel Fine Tuning Job
 *
 * @remarks
 * Request the cancellation of a fine tuning job.
 */ function fineTuningJobsCancel(client, request, options) {
    return new async_js_1.APIPromise($do(client, request, options));
}
async function $do(client, request, options) {
    const parsed = (0, schemas_js_1.safeParse)(request, (value)=>operations.JobsApiRoutesFineTuningCancelFineTuningJobRequest$outboundSchema.parse(value), "Input validation failed");
    if (!parsed.ok) {
        return [
            parsed,
            {
                status: "invalid"
            }
        ];
    }
    const payload = parsed.value;
    const body = null;
    const pathParams = {
        job_id: (0, encodings_js_1.encodeSimple)("job_id", payload.job_id, {
            explode: false,
            charEncoding: "percent"
        })
    };
    const path = (0, url_js_1.pathToFunc)("/v1/fine_tuning/jobs/{job_id}/cancel")(pathParams);
    const headers = new Headers((0, primitives_js_1.compactMap)({
        Accept: "application/json"
    }));
    const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
    const securityInput = secConfig == null ? {} : {
        apiKey: secConfig
    };
    const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
    const context = {
        baseURL: options?.serverURL ?? client._baseURL ?? "",
        operationID: "jobs_api_routes_fine_tuning_cancel_fine_tuning_job",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: options?.retries || client._options.retryConfig || {
            strategy: "none"
        },
        retryCodes: options?.retryCodes || [
            "429",
            "500",
            "502",
            "503",
            "504"
        ]
    };
    const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "POST",
        baseURL: options?.serverURL,
        path: path,
        headers: headers,
        body: body,
        timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1
    }, options);
    if (!requestRes.ok) {
        return [
            requestRes,
            {
                status: "invalid"
            }
        ];
    }
    const req = requestRes.value;
    const doResult = await client._do(req, {
        context,
        errorCodes: [
            "4XX",
            "5XX"
        ],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
    });
    if (!doResult.ok) {
        return [
            doResult,
            {
                status: "request-error",
                request: req
            }
        ];
    }
    const response = doResult.value;
    const [result] = await M.match(M.json(200, operations.JobsApiRoutesFineTuningCancelFineTuningJobResponse$inboundSchema), M.fail("4XX"), M.fail("5XX"))(response);
    if (!result.ok) {
        return [
            result,
            {
                status: "complete",
                request: req,
                response
            }
        ];
    }
    return [
        result,
        {
            status: "complete",
            request: req,
            response
        }
    ];
} //# sourceMappingURL=fineTuningJobsCancel.js.map
}}),
"[project]/node_modules/@mistralai/mistralai/funcs/fineTuningJobsCreate.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */ var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.fineTuningJobsCreate = fineTuningJobsCreate;
const encodings_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/encodings.js [app-route] (ecmascript)");
const M = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/matchers.js [app-route] (ecmascript)"));
const primitives_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/primitives.js [app-route] (ecmascript)");
const schemas_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/schemas.js [app-route] (ecmascript)");
const security_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/security.js [app-route] (ecmascript)");
const url_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/url.js [app-route] (ecmascript)");
const components = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/components/index.js [app-route] (ecmascript)"));
const operations = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/operations/index.js [app-route] (ecmascript)"));
const async_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/types/async.js [app-route] (ecmascript)");
/**
 * Create Fine Tuning Job
 *
 * @remarks
 * Create a new fine-tuning job, it will be queued for processing.
 */ function fineTuningJobsCreate(client, request, options) {
    return new async_js_1.APIPromise($do(client, request, options));
}
async function $do(client, request, options) {
    const parsed = (0, schemas_js_1.safeParse)(request, (value)=>components.JobIn$outboundSchema.parse(value), "Input validation failed");
    if (!parsed.ok) {
        return [
            parsed,
            {
                status: "invalid"
            }
        ];
    }
    const payload = parsed.value;
    const body = (0, encodings_js_1.encodeJSON)("body", payload, {
        explode: true
    });
    const path = (0, url_js_1.pathToFunc)("/v1/fine_tuning/jobs")();
    const headers = new Headers((0, primitives_js_1.compactMap)({
        "Content-Type": "application/json",
        Accept: "application/json"
    }));
    const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
    const securityInput = secConfig == null ? {} : {
        apiKey: secConfig
    };
    const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
    const context = {
        baseURL: options?.serverURL ?? client._baseURL ?? "",
        operationID: "jobs_api_routes_fine_tuning_create_fine_tuning_job",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: options?.retries || client._options.retryConfig || {
            strategy: "none"
        },
        retryCodes: options?.retryCodes || [
            "429",
            "500",
            "502",
            "503",
            "504"
        ]
    };
    const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "POST",
        baseURL: options?.serverURL,
        path: path,
        headers: headers,
        body: body,
        timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1
    }, options);
    if (!requestRes.ok) {
        return [
            requestRes,
            {
                status: "invalid"
            }
        ];
    }
    const req = requestRes.value;
    const doResult = await client._do(req, {
        context,
        errorCodes: [
            "4XX",
            "5XX"
        ],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
    });
    if (!doResult.ok) {
        return [
            doResult,
            {
                status: "request-error",
                request: req
            }
        ];
    }
    const response = doResult.value;
    const [result] = await M.match(M.json(200, operations.JobsApiRoutesFineTuningCreateFineTuningJobResponse$inboundSchema), M.fail("4XX"), M.fail("5XX"))(response);
    if (!result.ok) {
        return [
            result,
            {
                status: "complete",
                request: req,
                response
            }
        ];
    }
    return [
        result,
        {
            status: "complete",
            request: req,
            response
        }
    ];
} //# sourceMappingURL=fineTuningJobsCreate.js.map
}}),
"[project]/node_modules/@mistralai/mistralai/funcs/fineTuningJobsGet.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */ var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.fineTuningJobsGet = fineTuningJobsGet;
const encodings_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/encodings.js [app-route] (ecmascript)");
const M = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/matchers.js [app-route] (ecmascript)"));
const primitives_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/primitives.js [app-route] (ecmascript)");
const schemas_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/schemas.js [app-route] (ecmascript)");
const security_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/security.js [app-route] (ecmascript)");
const url_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/url.js [app-route] (ecmascript)");
const operations = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/operations/index.js [app-route] (ecmascript)"));
const async_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/types/async.js [app-route] (ecmascript)");
/**
 * Get Fine Tuning Job
 *
 * @remarks
 * Get a fine-tuned job details by its UUID.
 */ function fineTuningJobsGet(client, request, options) {
    return new async_js_1.APIPromise($do(client, request, options));
}
async function $do(client, request, options) {
    const parsed = (0, schemas_js_1.safeParse)(request, (value)=>operations.JobsApiRoutesFineTuningGetFineTuningJobRequest$outboundSchema.parse(value), "Input validation failed");
    if (!parsed.ok) {
        return [
            parsed,
            {
                status: "invalid"
            }
        ];
    }
    const payload = parsed.value;
    const body = null;
    const pathParams = {
        job_id: (0, encodings_js_1.encodeSimple)("job_id", payload.job_id, {
            explode: false,
            charEncoding: "percent"
        })
    };
    const path = (0, url_js_1.pathToFunc)("/v1/fine_tuning/jobs/{job_id}")(pathParams);
    const headers = new Headers((0, primitives_js_1.compactMap)({
        Accept: "application/json"
    }));
    const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
    const securityInput = secConfig == null ? {} : {
        apiKey: secConfig
    };
    const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
    const context = {
        baseURL: options?.serverURL ?? client._baseURL ?? "",
        operationID: "jobs_api_routes_fine_tuning_get_fine_tuning_job",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: options?.retries || client._options.retryConfig || {
            strategy: "none"
        },
        retryCodes: options?.retryCodes || [
            "429",
            "500",
            "502",
            "503",
            "504"
        ]
    };
    const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "GET",
        baseURL: options?.serverURL,
        path: path,
        headers: headers,
        body: body,
        timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1
    }, options);
    if (!requestRes.ok) {
        return [
            requestRes,
            {
                status: "invalid"
            }
        ];
    }
    const req = requestRes.value;
    const doResult = await client._do(req, {
        context,
        errorCodes: [
            "4XX",
            "5XX"
        ],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
    });
    if (!doResult.ok) {
        return [
            doResult,
            {
                status: "request-error",
                request: req
            }
        ];
    }
    const response = doResult.value;
    const [result] = await M.match(M.json(200, operations.JobsApiRoutesFineTuningGetFineTuningJobResponse$inboundSchema), M.fail("4XX"), M.fail("5XX"))(response);
    if (!result.ok) {
        return [
            result,
            {
                status: "complete",
                request: req,
                response
            }
        ];
    }
    return [
        result,
        {
            status: "complete",
            request: req,
            response
        }
    ];
} //# sourceMappingURL=fineTuningJobsGet.js.map
}}),
"[project]/node_modules/@mistralai/mistralai/funcs/fineTuningJobsList.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */ var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.fineTuningJobsList = fineTuningJobsList;
const encodings_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/encodings.js [app-route] (ecmascript)");
const M = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/matchers.js [app-route] (ecmascript)"));
const primitives_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/primitives.js [app-route] (ecmascript)");
const schemas_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/schemas.js [app-route] (ecmascript)");
const security_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/security.js [app-route] (ecmascript)");
const url_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/url.js [app-route] (ecmascript)");
const components = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/components/index.js [app-route] (ecmascript)"));
const operations = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/operations/index.js [app-route] (ecmascript)"));
const async_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/types/async.js [app-route] (ecmascript)");
/**
 * Get Fine Tuning Jobs
 *
 * @remarks
 * Get a list of fine-tuning jobs for your organization and user.
 */ function fineTuningJobsList(client, request, options) {
    return new async_js_1.APIPromise($do(client, request, options));
}
async function $do(client, request, options) {
    const parsed = (0, schemas_js_1.safeParse)(request, (value)=>operations.JobsApiRoutesFineTuningGetFineTuningJobsRequest$outboundSchema.optional().parse(value), "Input validation failed");
    if (!parsed.ok) {
        return [
            parsed,
            {
                status: "invalid"
            }
        ];
    }
    const payload = parsed.value;
    const body = null;
    const path = (0, url_js_1.pathToFunc)("/v1/fine_tuning/jobs")();
    const query = (0, encodings_js_1.encodeFormQuery)({
        "created_after": payload?.created_after,
        "created_before": payload?.created_before,
        "created_by_me": payload?.created_by_me,
        "model": payload?.model,
        "page": payload?.page,
        "page_size": payload?.page_size,
        "status": payload?.status,
        "suffix": payload?.suffix,
        "wandb_name": payload?.wandb_name,
        "wandb_project": payload?.wandb_project
    });
    const headers = new Headers((0, primitives_js_1.compactMap)({
        Accept: "application/json"
    }));
    const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
    const securityInput = secConfig == null ? {} : {
        apiKey: secConfig
    };
    const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
    const context = {
        baseURL: options?.serverURL ?? client._baseURL ?? "",
        operationID: "jobs_api_routes_fine_tuning_get_fine_tuning_jobs",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: options?.retries || client._options.retryConfig || {
            strategy: "none"
        },
        retryCodes: options?.retryCodes || [
            "429",
            "500",
            "502",
            "503",
            "504"
        ]
    };
    const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "GET",
        baseURL: options?.serverURL,
        path: path,
        headers: headers,
        query: query,
        body: body,
        timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1
    }, options);
    if (!requestRes.ok) {
        return [
            requestRes,
            {
                status: "invalid"
            }
        ];
    }
    const req = requestRes.value;
    const doResult = await client._do(req, {
        context,
        errorCodes: [
            "4XX",
            "5XX"
        ],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
    });
    if (!doResult.ok) {
        return [
            doResult,
            {
                status: "request-error",
                request: req
            }
        ];
    }
    const response = doResult.value;
    const [result] = await M.match(M.json(200, components.JobsOut$inboundSchema), M.fail("4XX"), M.fail("5XX"))(response);
    if (!result.ok) {
        return [
            result,
            {
                status: "complete",
                request: req,
                response
            }
        ];
    }
    return [
        result,
        {
            status: "complete",
            request: req,
            response
        }
    ];
} //# sourceMappingURL=fineTuningJobsList.js.map
}}),
"[project]/node_modules/@mistralai/mistralai/funcs/fineTuningJobsStart.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */ var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.fineTuningJobsStart = fineTuningJobsStart;
const encodings_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/encodings.js [app-route] (ecmascript)");
const M = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/matchers.js [app-route] (ecmascript)"));
const primitives_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/primitives.js [app-route] (ecmascript)");
const schemas_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/schemas.js [app-route] (ecmascript)");
const security_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/security.js [app-route] (ecmascript)");
const url_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/url.js [app-route] (ecmascript)");
const operations = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/operations/index.js [app-route] (ecmascript)"));
const async_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/types/async.js [app-route] (ecmascript)");
/**
 * Start Fine Tuning Job
 *
 * @remarks
 * Request the start of a validated fine tuning job.
 */ function fineTuningJobsStart(client, request, options) {
    return new async_js_1.APIPromise($do(client, request, options));
}
async function $do(client, request, options) {
    const parsed = (0, schemas_js_1.safeParse)(request, (value)=>operations.JobsApiRoutesFineTuningStartFineTuningJobRequest$outboundSchema.parse(value), "Input validation failed");
    if (!parsed.ok) {
        return [
            parsed,
            {
                status: "invalid"
            }
        ];
    }
    const payload = parsed.value;
    const body = null;
    const pathParams = {
        job_id: (0, encodings_js_1.encodeSimple)("job_id", payload.job_id, {
            explode: false,
            charEncoding: "percent"
        })
    };
    const path = (0, url_js_1.pathToFunc)("/v1/fine_tuning/jobs/{job_id}/start")(pathParams);
    const headers = new Headers((0, primitives_js_1.compactMap)({
        Accept: "application/json"
    }));
    const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
    const securityInput = secConfig == null ? {} : {
        apiKey: secConfig
    };
    const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
    const context = {
        baseURL: options?.serverURL ?? client._baseURL ?? "",
        operationID: "jobs_api_routes_fine_tuning_start_fine_tuning_job",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: options?.retries || client._options.retryConfig || {
            strategy: "none"
        },
        retryCodes: options?.retryCodes || [
            "429",
            "500",
            "502",
            "503",
            "504"
        ]
    };
    const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "POST",
        baseURL: options?.serverURL,
        path: path,
        headers: headers,
        body: body,
        timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1
    }, options);
    if (!requestRes.ok) {
        return [
            requestRes,
            {
                status: "invalid"
            }
        ];
    }
    const req = requestRes.value;
    const doResult = await client._do(req, {
        context,
        errorCodes: [
            "4XX",
            "5XX"
        ],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
    });
    if (!doResult.ok) {
        return [
            doResult,
            {
                status: "request-error",
                request: req
            }
        ];
    }
    const response = doResult.value;
    const [result] = await M.match(M.json(200, operations.JobsApiRoutesFineTuningStartFineTuningJobResponse$inboundSchema), M.fail("4XX"), M.fail("5XX"))(response);
    if (!result.ok) {
        return [
            result,
            {
                status: "complete",
                request: req,
                response
            }
        ];
    }
    return [
        result,
        {
            status: "complete",
            request: req,
            response
        }
    ];
} //# sourceMappingURL=fineTuningJobsStart.js.map
}}),
"[project]/node_modules/@mistralai/mistralai/funcs/modelsArchive.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */ var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.modelsArchive = modelsArchive;
const encodings_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/encodings.js [app-route] (ecmascript)");
const M = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/matchers.js [app-route] (ecmascript)"));
const primitives_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/primitives.js [app-route] (ecmascript)");
const schemas_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/schemas.js [app-route] (ecmascript)");
const security_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/security.js [app-route] (ecmascript)");
const url_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/url.js [app-route] (ecmascript)");
const components = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/components/index.js [app-route] (ecmascript)"));
const operations = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/operations/index.js [app-route] (ecmascript)"));
const async_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/types/async.js [app-route] (ecmascript)");
/**
 * Archive Fine Tuned Model
 *
 * @remarks
 * Archive a fine-tuned model.
 */ function modelsArchive(client, request, options) {
    return new async_js_1.APIPromise($do(client, request, options));
}
async function $do(client, request, options) {
    const parsed = (0, schemas_js_1.safeParse)(request, (value)=>operations.JobsApiRoutesFineTuningArchiveFineTunedModelRequest$outboundSchema.parse(value), "Input validation failed");
    if (!parsed.ok) {
        return [
            parsed,
            {
                status: "invalid"
            }
        ];
    }
    const payload = parsed.value;
    const body = null;
    const pathParams = {
        model_id: (0, encodings_js_1.encodeSimple)("model_id", payload.model_id, {
            explode: false,
            charEncoding: "percent"
        })
    };
    const path = (0, url_js_1.pathToFunc)("/v1/fine_tuning/models/{model_id}/archive")(pathParams);
    const headers = new Headers((0, primitives_js_1.compactMap)({
        Accept: "application/json"
    }));
    const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
    const securityInput = secConfig == null ? {} : {
        apiKey: secConfig
    };
    const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
    const context = {
        baseURL: options?.serverURL ?? client._baseURL ?? "",
        operationID: "jobs_api_routes_fine_tuning_archive_fine_tuned_model",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: options?.retries || client._options.retryConfig || {
            strategy: "none"
        },
        retryCodes: options?.retryCodes || [
            "429",
            "500",
            "502",
            "503",
            "504"
        ]
    };
    const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "POST",
        baseURL: options?.serverURL,
        path: path,
        headers: headers,
        body: body,
        timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1
    }, options);
    if (!requestRes.ok) {
        return [
            requestRes,
            {
                status: "invalid"
            }
        ];
    }
    const req = requestRes.value;
    const doResult = await client._do(req, {
        context,
        errorCodes: [
            "4XX",
            "5XX"
        ],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
    });
    if (!doResult.ok) {
        return [
            doResult,
            {
                status: "request-error",
                request: req
            }
        ];
    }
    const response = doResult.value;
    const [result] = await M.match(M.json(200, components.ArchiveFTModelOut$inboundSchema), M.fail("4XX"), M.fail("5XX"))(response);
    if (!result.ok) {
        return [
            result,
            {
                status: "complete",
                request: req,
                response
            }
        ];
    }
    return [
        result,
        {
            status: "complete",
            request: req,
            response
        }
    ];
} //# sourceMappingURL=modelsArchive.js.map
}}),
"[project]/node_modules/@mistralai/mistralai/funcs/modelsDelete.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */ var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.modelsDelete = modelsDelete;
const encodings_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/encodings.js [app-route] (ecmascript)");
const M = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/matchers.js [app-route] (ecmascript)"));
const primitives_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/primitives.js [app-route] (ecmascript)");
const schemas_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/schemas.js [app-route] (ecmascript)");
const security_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/security.js [app-route] (ecmascript)");
const url_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/url.js [app-route] (ecmascript)");
const components = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/components/index.js [app-route] (ecmascript)"));
const errors = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/errors/index.js [app-route] (ecmascript)"));
const operations = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/operations/index.js [app-route] (ecmascript)"));
const async_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/types/async.js [app-route] (ecmascript)");
/**
 * Delete Model
 *
 * @remarks
 * Delete a fine-tuned model.
 */ function modelsDelete(client, request, options) {
    return new async_js_1.APIPromise($do(client, request, options));
}
async function $do(client, request, options) {
    const parsed = (0, schemas_js_1.safeParse)(request, (value)=>operations.DeleteModelV1ModelsModelIdDeleteRequest$outboundSchema.parse(value), "Input validation failed");
    if (!parsed.ok) {
        return [
            parsed,
            {
                status: "invalid"
            }
        ];
    }
    const payload = parsed.value;
    const body = null;
    const pathParams = {
        model_id: (0, encodings_js_1.encodeSimple)("model_id", payload.model_id, {
            explode: false,
            charEncoding: "percent"
        })
    };
    const path = (0, url_js_1.pathToFunc)("/v1/models/{model_id}")(pathParams);
    const headers = new Headers((0, primitives_js_1.compactMap)({
        Accept: "application/json"
    }));
    const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
    const securityInput = secConfig == null ? {} : {
        apiKey: secConfig
    };
    const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
    const context = {
        baseURL: options?.serverURL ?? client._baseURL ?? "",
        operationID: "delete_model_v1_models__model_id__delete",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: options?.retries || client._options.retryConfig || {
            strategy: "none"
        },
        retryCodes: options?.retryCodes || [
            "429",
            "500",
            "502",
            "503",
            "504"
        ]
    };
    const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "DELETE",
        baseURL: options?.serverURL,
        path: path,
        headers: headers,
        body: body,
        timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1
    }, options);
    if (!requestRes.ok) {
        return [
            requestRes,
            {
                status: "invalid"
            }
        ];
    }
    const req = requestRes.value;
    const doResult = await client._do(req, {
        context,
        errorCodes: [
            "422",
            "4XX",
            "5XX"
        ],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
    });
    if (!doResult.ok) {
        return [
            doResult,
            {
                status: "request-error",
                request: req
            }
        ];
    }
    const response = doResult.value;
    const responseFields = {
        HttpMeta: {
            Response: response,
            Request: req
        }
    };
    const [result] = await M.match(M.json(200, components.DeleteModelOut$inboundSchema), M.jsonErr(422, errors.HTTPValidationError$inboundSchema), M.fail("4XX"), M.fail("5XX"))(response, {
        extraFields: responseFields
    });
    if (!result.ok) {
        return [
            result,
            {
                status: "complete",
                request: req,
                response
            }
        ];
    }
    return [
        result,
        {
            status: "complete",
            request: req,
            response
        }
    ];
} //# sourceMappingURL=modelsDelete.js.map
}}),
"[project]/node_modules/@mistralai/mistralai/funcs/modelsList.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */ var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.modelsList = modelsList;
const M = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/matchers.js [app-route] (ecmascript)"));
const primitives_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/primitives.js [app-route] (ecmascript)");
const security_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/security.js [app-route] (ecmascript)");
const url_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/url.js [app-route] (ecmascript)");
const components = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/components/index.js [app-route] (ecmascript)"));
const errors = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/errors/index.js [app-route] (ecmascript)"));
const async_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/types/async.js [app-route] (ecmascript)");
/**
 * List Models
 *
 * @remarks
 * List all models available to the user.
 */ function modelsList(client, options) {
    return new async_js_1.APIPromise($do(client, options));
}
async function $do(client, options) {
    const path = (0, url_js_1.pathToFunc)("/v1/models")();
    const headers = new Headers((0, primitives_js_1.compactMap)({
        Accept: "application/json"
    }));
    const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
    const securityInput = secConfig == null ? {} : {
        apiKey: secConfig
    };
    const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
    const context = {
        baseURL: options?.serverURL ?? client._baseURL ?? "",
        operationID: "list_models_v1_models_get",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: options?.retries || client._options.retryConfig || {
            strategy: "none"
        },
        retryCodes: options?.retryCodes || [
            "429",
            "500",
            "502",
            "503",
            "504"
        ]
    };
    const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "GET",
        baseURL: options?.serverURL,
        path: path,
        headers: headers,
        timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1
    }, options);
    if (!requestRes.ok) {
        return [
            requestRes,
            {
                status: "invalid"
            }
        ];
    }
    const req = requestRes.value;
    const doResult = await client._do(req, {
        context,
        errorCodes: [
            "422",
            "4XX",
            "5XX"
        ],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
    });
    if (!doResult.ok) {
        return [
            doResult,
            {
                status: "request-error",
                request: req
            }
        ];
    }
    const response = doResult.value;
    const responseFields = {
        HttpMeta: {
            Response: response,
            Request: req
        }
    };
    const [result] = await M.match(M.json(200, components.ModelList$inboundSchema), M.jsonErr(422, errors.HTTPValidationError$inboundSchema), M.fail("4XX"), M.fail("5XX"))(response, {
        extraFields: responseFields
    });
    if (!result.ok) {
        return [
            result,
            {
                status: "complete",
                request: req,
                response
            }
        ];
    }
    return [
        result,
        {
            status: "complete",
            request: req,
            response
        }
    ];
} //# sourceMappingURL=modelsList.js.map
}}),
"[project]/node_modules/@mistralai/mistralai/funcs/modelsRetrieve.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */ var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.modelsRetrieve = modelsRetrieve;
const encodings_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/encodings.js [app-route] (ecmascript)");
const M = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/matchers.js [app-route] (ecmascript)"));
const primitives_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/primitives.js [app-route] (ecmascript)");
const schemas_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/schemas.js [app-route] (ecmascript)");
const security_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/security.js [app-route] (ecmascript)");
const url_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/url.js [app-route] (ecmascript)");
const errors = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/errors/index.js [app-route] (ecmascript)"));
const operations = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/operations/index.js [app-route] (ecmascript)"));
const async_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/types/async.js [app-route] (ecmascript)");
/**
 * Retrieve Model
 *
 * @remarks
 * Retrieve a model information.
 */ function modelsRetrieve(client, request, options) {
    return new async_js_1.APIPromise($do(client, request, options));
}
async function $do(client, request, options) {
    const parsed = (0, schemas_js_1.safeParse)(request, (value)=>operations.RetrieveModelV1ModelsModelIdGetRequest$outboundSchema.parse(value), "Input validation failed");
    if (!parsed.ok) {
        return [
            parsed,
            {
                status: "invalid"
            }
        ];
    }
    const payload = parsed.value;
    const body = null;
    const pathParams = {
        model_id: (0, encodings_js_1.encodeSimple)("model_id", payload.model_id, {
            explode: false,
            charEncoding: "percent"
        })
    };
    const path = (0, url_js_1.pathToFunc)("/v1/models/{model_id}")(pathParams);
    const headers = new Headers((0, primitives_js_1.compactMap)({
        Accept: "application/json"
    }));
    const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
    const securityInput = secConfig == null ? {} : {
        apiKey: secConfig
    };
    const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
    const context = {
        baseURL: options?.serverURL ?? client._baseURL ?? "",
        operationID: "retrieve_model_v1_models__model_id__get",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: options?.retries || client._options.retryConfig || {
            strategy: "none"
        },
        retryCodes: options?.retryCodes || [
            "429",
            "500",
            "502",
            "503",
            "504"
        ]
    };
    const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "GET",
        baseURL: options?.serverURL,
        path: path,
        headers: headers,
        body: body,
        timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1
    }, options);
    if (!requestRes.ok) {
        return [
            requestRes,
            {
                status: "invalid"
            }
        ];
    }
    const req = requestRes.value;
    const doResult = await client._do(req, {
        context,
        errorCodes: [
            "422",
            "4XX",
            "5XX"
        ],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
    });
    if (!doResult.ok) {
        return [
            doResult,
            {
                status: "request-error",
                request: req
            }
        ];
    }
    const response = doResult.value;
    const responseFields = {
        HttpMeta: {
            Response: response,
            Request: req
        }
    };
    const [result] = await M.match(M.json(200, operations.RetrieveModelV1ModelsModelIdGetResponseRetrieveModelV1ModelsModelIdGet$inboundSchema), M.jsonErr(422, errors.HTTPValidationError$inboundSchema), M.fail("4XX"), M.fail("5XX"))(response, {
        extraFields: responseFields
    });
    if (!result.ok) {
        return [
            result,
            {
                status: "complete",
                request: req,
                response
            }
        ];
    }
    return [
        result,
        {
            status: "complete",
            request: req,
            response
        }
    ];
} //# sourceMappingURL=modelsRetrieve.js.map
}}),
"[project]/node_modules/@mistralai/mistralai/funcs/modelsUnarchive.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */ var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.modelsUnarchive = modelsUnarchive;
const encodings_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/encodings.js [app-route] (ecmascript)");
const M = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/matchers.js [app-route] (ecmascript)"));
const primitives_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/primitives.js [app-route] (ecmascript)");
const schemas_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/schemas.js [app-route] (ecmascript)");
const security_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/security.js [app-route] (ecmascript)");
const url_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/url.js [app-route] (ecmascript)");
const components = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/components/index.js [app-route] (ecmascript)"));
const operations = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/operations/index.js [app-route] (ecmascript)"));
const async_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/types/async.js [app-route] (ecmascript)");
/**
 * Unarchive Fine Tuned Model
 *
 * @remarks
 * Un-archive a fine-tuned model.
 */ function modelsUnarchive(client, request, options) {
    return new async_js_1.APIPromise($do(client, request, options));
}
async function $do(client, request, options) {
    const parsed = (0, schemas_js_1.safeParse)(request, (value)=>operations.JobsApiRoutesFineTuningUnarchiveFineTunedModelRequest$outboundSchema.parse(value), "Input validation failed");
    if (!parsed.ok) {
        return [
            parsed,
            {
                status: "invalid"
            }
        ];
    }
    const payload = parsed.value;
    const body = null;
    const pathParams = {
        model_id: (0, encodings_js_1.encodeSimple)("model_id", payload.model_id, {
            explode: false,
            charEncoding: "percent"
        })
    };
    const path = (0, url_js_1.pathToFunc)("/v1/fine_tuning/models/{model_id}/archive")(pathParams);
    const headers = new Headers((0, primitives_js_1.compactMap)({
        Accept: "application/json"
    }));
    const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
    const securityInput = secConfig == null ? {} : {
        apiKey: secConfig
    };
    const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
    const context = {
        baseURL: options?.serverURL ?? client._baseURL ?? "",
        operationID: "jobs_api_routes_fine_tuning_unarchive_fine_tuned_model",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: options?.retries || client._options.retryConfig || {
            strategy: "none"
        },
        retryCodes: options?.retryCodes || [
            "429",
            "500",
            "502",
            "503",
            "504"
        ]
    };
    const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "DELETE",
        baseURL: options?.serverURL,
        path: path,
        headers: headers,
        body: body,
        timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1
    }, options);
    if (!requestRes.ok) {
        return [
            requestRes,
            {
                status: "invalid"
            }
        ];
    }
    const req = requestRes.value;
    const doResult = await client._do(req, {
        context,
        errorCodes: [
            "4XX",
            "5XX"
        ],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
    });
    if (!doResult.ok) {
        return [
            doResult,
            {
                status: "request-error",
                request: req
            }
        ];
    }
    const response = doResult.value;
    const [result] = await M.match(M.json(200, components.UnarchiveFTModelOut$inboundSchema), M.fail("4XX"), M.fail("5XX"))(response);
    if (!result.ok) {
        return [
            result,
            {
                status: "complete",
                request: req,
                response
            }
        ];
    }
    return [
        result,
        {
            status: "complete",
            request: req,
            response
        }
    ];
} //# sourceMappingURL=modelsUnarchive.js.map
}}),
"[project]/node_modules/@mistralai/mistralai/funcs/modelsUpdate.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */ var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.modelsUpdate = modelsUpdate;
const encodings_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/encodings.js [app-route] (ecmascript)");
const M = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/matchers.js [app-route] (ecmascript)"));
const primitives_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/primitives.js [app-route] (ecmascript)");
const schemas_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/schemas.js [app-route] (ecmascript)");
const security_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/security.js [app-route] (ecmascript)");
const url_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/url.js [app-route] (ecmascript)");
const operations = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/operations/index.js [app-route] (ecmascript)"));
const async_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/types/async.js [app-route] (ecmascript)");
/**
 * Update Fine Tuned Model
 *
 * @remarks
 * Update a model name or description.
 */ function modelsUpdate(client, request, options) {
    return new async_js_1.APIPromise($do(client, request, options));
}
async function $do(client, request, options) {
    const parsed = (0, schemas_js_1.safeParse)(request, (value)=>operations.JobsApiRoutesFineTuningUpdateFineTunedModelRequest$outboundSchema.parse(value), "Input validation failed");
    if (!parsed.ok) {
        return [
            parsed,
            {
                status: "invalid"
            }
        ];
    }
    const payload = parsed.value;
    const body = (0, encodings_js_1.encodeJSON)("body", payload.UpdateFTModelIn, {
        explode: true
    });
    const pathParams = {
        model_id: (0, encodings_js_1.encodeSimple)("model_id", payload.model_id, {
            explode: false,
            charEncoding: "percent"
        })
    };
    const path = (0, url_js_1.pathToFunc)("/v1/fine_tuning/models/{model_id}")(pathParams);
    const headers = new Headers((0, primitives_js_1.compactMap)({
        "Content-Type": "application/json",
        Accept: "application/json"
    }));
    const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
    const securityInput = secConfig == null ? {} : {
        apiKey: secConfig
    };
    const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
    const context = {
        baseURL: options?.serverURL ?? client._baseURL ?? "",
        operationID: "jobs_api_routes_fine_tuning_update_fine_tuned_model",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: options?.retries || client._options.retryConfig || {
            strategy: "none"
        },
        retryCodes: options?.retryCodes || [
            "429",
            "500",
            "502",
            "503",
            "504"
        ]
    };
    const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "PATCH",
        baseURL: options?.serverURL,
        path: path,
        headers: headers,
        body: body,
        timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1
    }, options);
    if (!requestRes.ok) {
        return [
            requestRes,
            {
                status: "invalid"
            }
        ];
    }
    const req = requestRes.value;
    const doResult = await client._do(req, {
        context,
        errorCodes: [
            "4XX",
            "5XX"
        ],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
    });
    if (!doResult.ok) {
        return [
            doResult,
            {
                status: "request-error",
                request: req
            }
        ];
    }
    const response = doResult.value;
    const [result] = await M.match(M.json(200, operations.JobsApiRoutesFineTuningUpdateFineTunedModelResponse$inboundSchema), M.fail("4XX"), M.fail("5XX"))(response);
    if (!result.ok) {
        return [
            result,
            {
                status: "complete",
                request: req,
                response
            }
        ];
    }
    return [
        result,
        {
            status: "complete",
            request: req,
            response
        }
    ];
} //# sourceMappingURL=modelsUpdate.js.map
}}),
"[project]/node_modules/@mistralai/mistralai/funcs/ocrProcess.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */ var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ocrProcess = ocrProcess;
const encodings_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/encodings.js [app-route] (ecmascript)");
const M = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/matchers.js [app-route] (ecmascript)"));
const primitives_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/primitives.js [app-route] (ecmascript)");
const schemas_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/schemas.js [app-route] (ecmascript)");
const security_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/security.js [app-route] (ecmascript)");
const url_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/lib/url.js [app-route] (ecmascript)");
const components = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/components/index.js [app-route] (ecmascript)"));
const errors = __importStar(__turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/models/errors/index.js [app-route] (ecmascript)"));
const async_js_1 = __turbopack_context__.r("[project]/node_modules/@mistralai/mistralai/types/async.js [app-route] (ecmascript)");
/**
 * OCR
 */ function ocrProcess(client, request, options) {
    return new async_js_1.APIPromise($do(client, request, options));
}
async function $do(client, request, options) {
    const parsed = (0, schemas_js_1.safeParse)(request, (value)=>components.OCRRequest$outboundSchema.parse(value), "Input validation failed");
    if (!parsed.ok) {
        return [
            parsed,
            {
                status: "invalid"
            }
        ];
    }
    const payload = parsed.value;
    const body = (0, encodings_js_1.encodeJSON)("body", payload, {
        explode: true
    });
    const path = (0, url_js_1.pathToFunc)("/v1/ocr")();
    const headers = new Headers((0, primitives_js_1.compactMap)({
        "Content-Type": "application/json",
        Accept: "application/json"
    }));
    const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
    const securityInput = secConfig == null ? {} : {
        apiKey: secConfig
    };
    const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
    const context = {
        baseURL: options?.serverURL ?? client._baseURL ?? "",
        operationID: "ocr_v1_ocr_post",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: options?.retries || client._options.retryConfig || {
            strategy: "none"
        },
        retryCodes: options?.retryCodes || [
            "429",
            "500",
            "502",
            "503",
            "504"
        ]
    };
    const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "POST",
        baseURL: options?.serverURL,
        path: path,
        headers: headers,
        body: body,
        timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1
    }, options);
    if (!requestRes.ok) {
        return [
            requestRes,
            {
                status: "invalid"
            }
        ];
    }
    const req = requestRes.value;
    const doResult = await client._do(req, {
        context,
        errorCodes: [
            "422",
            "4XX",
            "5XX"
        ],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
    });
    if (!doResult.ok) {
        return [
            doResult,
            {
                status: "request-error",
                request: req
            }
        ];
    }
    const response = doResult.value;
    const responseFields = {
        HttpMeta: {
            Response: response,
            Request: req
        }
    };
    const [result] = await M.match(M.json(200, components.OCRResponse$inboundSchema), M.jsonErr(422, errors.HTTPValidationError$inboundSchema), M.fail("4XX"), M.fail("5XX"))(response, {
        extraFields: responseFields
    });
    if (!result.ok) {
        return [
            result,
            {
                status: "complete",
                request: req,
                response
            }
        ];
    }
    return [
        result,
        {
            status: "complete",
            request: req,
            response
        }
    ];
} //# sourceMappingURL=ocrProcess.js.map
}}),

};

//# sourceMappingURL=node_modules_%40mistralai_mistralai_funcs_08e77271._.js.map