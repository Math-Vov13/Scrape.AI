{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 52, "column": 0}, "map": {"version":3,"sources":["file:///Users/clement/Desktop/Github/Mistral-copie/src/app/api/chat/route.ts"],"sourcesContent":["import { NextRequest } from 'next/server';\n\nconst MISTRAL_API_KEY = process.env.MISTRAL_API_KEY || 'S2nqvZQmrdaRwhNhgcMT3M7uyHcjAK5D';\n\nexport async function POST(request: NextRequest) {\n  try {\n    const { prompt } = await request.json();\n    \n    // Use fetch directly instead of the Mistral SDK to avoid constructor issues\n    const response = await fetch('https://api.mistral.ai/v1/chat/completions', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${MISTRAL_API_KEY}`,\n      },\n      body: JSON.stringify({\n        model: 'mistral-small',\n        messages: [{ role: 'user', content: prompt }],\n        stream: true,\n      }),\n    });\n    \n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error('Mistral API error:', response.status, errorText);\n      return new Response(\n        JSON.stringify({ error: `Mistral API error: ${response.status}` }),\n        { status: 500, headers: { 'Content-Type': 'application/json' } }\n      );\n    }\n\n    if (!response.body) {\n      return new Response(\n        JSON.stringify({ error: 'No response body from Mistral API' }),\n        { status: 500, headers: { 'Content-Type': 'application/json' } }\n      );\n    }\n\n    // Create a TransformStream to process the SSE stream\n    const stream = new TransformStream();\n    const writer = stream.writable.getWriter();\n    const encoder = new TextEncoder();\n    const decoder = new TextDecoder();\n\n    // Process the streaming response\n    (async () => {\n      try {\n        const reader = response.body!.getReader();\n        let buffer = '';\n\n        while (true) {\n          const { done, value } = await reader.read();\n          if (done) break;\n\n          buffer += decoder.decode(value, { stream: true });\n          const lines = buffer.split('\\n');\n          buffer = lines.pop() || '';\n\n          for (const line of lines) {\n            const trimmed = line.trim();\n            if (!trimmed || !trimmed.startsWith('data: ')) continue;\n            \n            const data = trimmed.slice(6); // Remove 'data: '\n            if (data === '[DONE]') break;\n\n            try {\n              const parsed = JSON.parse(data);\n              const content = parsed.choices?.[0]?.delta?.content;\n              if (content) {\n                await writer.write(encoder.encode(content));\n              }\n            } catch (e) {\n              // Skip invalid JSON\n            }\n          }\n        }\n      } catch (error) {\n        console.error('Stream processing error:', error);\n      } finally {\n        await writer.close();\n      }\n    })();\n\n    return new Response(stream.readable, {\n      headers: {\n        'Content-Type': 'text/plain; charset=utf-8',\n        'Cache-Control': 'no-cache',\n      },\n    });\n  } catch (err) {\n    console.error('Mistral API error:', err);\n    return new Response(\n      JSON.stringify({ error: 'Error connecting to Mistral AI' }),\n      { status: 500, headers: { 'Content-Type': 'application/json' } }\n    );\n  }\n}"],"names":[],"mappings":";;;AAEA,MAAM,kBAAkB,QAAQ,GAAG,CAAC,eAAe,IAAI;AAEhD,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,QAAQ,IAAI;QAErC,4EAA4E;QAC5E,MAAM,WAAW,MAAM,MAAM,8CAA8C;YACzE,QAAQ;YACR,SAAS;gBACP,gBAAgB;gBAChB,iBAAiB,CAAC,OAAO,EAAE,iBAAiB;YAC9C;YACA,MAAM,KAAK,SAAS,CAAC;gBACnB,OAAO;gBACP,UAAU;oBAAC;wBAAE,MAAM;wBAAQ,SAAS;oBAAO;iBAAE;gBAC7C,QAAQ;YACV;QACF;QAEA,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,YAAY,MAAM,SAAS,IAAI;YACrC,QAAQ,KAAK,CAAC,sBAAsB,SAAS,MAAM,EAAE;YACrD,OAAO,IAAI,SACT,KAAK,SAAS,CAAC;gBAAE,OAAO,CAAC,mBAAmB,EAAE,SAAS,MAAM,EAAE;YAAC,IAChE;gBAAE,QAAQ;gBAAK,SAAS;oBAAE,gBAAgB;gBAAmB;YAAE;QAEnE;QAEA,IAAI,CAAC,SAAS,IAAI,EAAE;YAClB,OAAO,IAAI,SACT,KAAK,SAAS,CAAC;gBAAE,OAAO;YAAoC,IAC5D;gBAAE,QAAQ;gBAAK,SAAS;oBAAE,gBAAgB;gBAAmB;YAAE;QAEnE;QAEA,qDAAqD;QACrD,MAAM,SAAS,IAAI;QACnB,MAAM,SAAS,OAAO,QAAQ,CAAC,SAAS;QACxC,MAAM,UAAU,IAAI;QACpB,MAAM,UAAU,IAAI;QAEpB,iCAAiC;QACjC,CAAC;YACC,IAAI;gBACF,MAAM,SAAS,SAAS,IAAI,CAAE,SAAS;gBACvC,IAAI,SAAS;gBAEb,MAAO,KAAM;oBACX,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,OAAO,IAAI;oBACzC,IAAI,MAAM;oBAEV,UAAU,QAAQ,MAAM,CAAC,OAAO;wBAAE,QAAQ;oBAAK;oBAC/C,MAAM,QAAQ,OAAO,KAAK,CAAC;oBAC3B,SAAS,MAAM,GAAG,MAAM;oBAExB,KAAK,MAAM,QAAQ,MAAO;wBACxB,MAAM,UAAU,KAAK,IAAI;wBACzB,IAAI,CAAC,WAAW,CAAC,QAAQ,UAAU,CAAC,WAAW;wBAE/C,MAAM,OAAO,QAAQ,KAAK,CAAC,IAAI,kBAAkB;wBACjD,IAAI,SAAS,UAAU;wBAEvB,IAAI;4BACF,MAAM,SAAS,KAAK,KAAK,CAAC;4BAC1B,MAAM,UAAU,OAAO,OAAO,EAAE,CAAC,EAAE,EAAE,OAAO;4BAC5C,IAAI,SAAS;gCACX,MAAM,OAAO,KAAK,CAAC,QAAQ,MAAM,CAAC;4BACpC;wBACF,EAAE,OAAO,GAAG;wBACV,oBAAoB;wBACtB;oBACF;gBACF;YACF,EAAE,OAAO,OAAO;gBACd,QAAQ,KAAK,CAAC,4BAA4B;YAC5C,SAAU;gBACR,MAAM,OAAO,KAAK;YACpB;QACF,CAAC;QAED,OAAO,IAAI,SAAS,OAAO,QAAQ,EAAE;YACnC,SAAS;gBACP,gBAAgB;gBAChB,iBAAiB;YACnB;QACF;IACF,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC,sBAAsB;QACpC,OAAO,IAAI,SACT,KAAK,SAAS,CAAC;YAAE,OAAO;QAAiC,IACzD;YAAE,QAAQ;YAAK,SAAS;gBAAE,gBAAgB;YAAmB;QAAE;IAEnE;AACF","debugId":null}}]
}