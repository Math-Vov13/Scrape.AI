{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/app/api/chat/route.ts"],"sourcesContent":["export const runtime = 'edge';\n\nimport { NextRequest } from 'next/server';\nimport MistralClient from '@mistralai/mistralai';\n\nconst MISTRAL_API_KEY = process.env.MISTRAL_API_KEY || 'S2nqvZQmrdaRwhNhgcMT3M7uyHcjAK5D';\n\nexport async function POST(request: NextRequest) {\n  try {\n    const { prompt } = await request.json();\n    \n    // Initialize Mistral client with API key\n    const client = new MistralClient(MISTRAL_API_KEY);\n    \n    // Create a TransformStream to pipe the response\n    const stream = new TransformStream();\n    const writer = stream.writable.getWriter();\n    const encoder = new TextEncoder();\n\n    // Start streaming response\n    (async () => {\n      try {\n        // Start chat stream with the prompt\n        const chatStream = await client.chatStream({\n          model: 'mistral-small',\n          messages: [{ role: 'user', content: prompt }],\n        });\n\n        // Process each chunk\n        for await (const chunk of chatStream) {\n          if (chunk.choices[0]?.delta?.content !== undefined) {\n            const text = chunk.choices[0].delta.content;\n            await writer.write(encoder.encode(text));\n          }\n        }\n      } catch (error) {\n        console.error('Stream error:', error);\n      } finally {\n        await writer.close();\n      }\n    })();\n\n    // Return the readable stream to the client\n    return new Response(stream.readable, {\n      headers: {\n        'Content-Type': 'text/plain; charset=utf-8',\n        'Transfer-Encoding': 'chunked',\n        'Cache-Control': 'no-cache',\n      },\n    });\n  } catch (err) {\n    console.error('Mistral API error:', err);\n    return new Response(\n      JSON.stringify({ error: 'Error connecting to Mistral AI' }),\n      { status: 500, headers: { 'Content-Type': 'application/json' } }\n    );\n  }\n}"],"names":[],"mappings":";;;;AAGA;AAHO,MAAM,UAAU;;AAKvB,MAAM,kBAAkB,QAAQ,GAAG,CAAC,eAAe,IAAI;AAEhD,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,QAAQ,IAAI;QAErC,yCAAyC;QACzC,MAAM,SAAS,IAAI,2JAAA,CAAA,UAAa,CAAC;QAEjC,gDAAgD;QAChD,MAAM,SAAS,IAAI;QACnB,MAAM,SAAS,OAAO,QAAQ,CAAC,SAAS;QACxC,MAAM,UAAU,IAAI;QAEpB,2BAA2B;QAC3B,CAAC;YACC,IAAI;gBACF,oCAAoC;gBACpC,MAAM,aAAa,MAAM,OAAO,UAAU,CAAC;oBACzC,OAAO;oBACP,UAAU;wBAAC;4BAAE,MAAM;4BAAQ,SAAS;wBAAO;qBAAE;gBAC/C;gBAEA,qBAAqB;gBACrB,WAAW,MAAM,SAAS,WAAY;oBACpC,IAAI,MAAM,OAAO,CAAC,EAAE,EAAE,OAAO,YAAY,WAAW;wBAClD,MAAM,OAAO,MAAM,OAAO,CAAC,EAAE,CAAC,KAAK,CAAC,OAAO;wBAC3C,MAAM,OAAO,KAAK,CAAC,QAAQ,MAAM,CAAC;oBACpC;gBACF;YACF,EAAE,OAAO,OAAO;gBACd,QAAQ,KAAK,CAAC,iBAAiB;YACjC,SAAU;gBACR,MAAM,OAAO,KAAK;YACpB;QACF,CAAC;QAED,2CAA2C;QAC3C,OAAO,IAAI,SAAS,OAAO,QAAQ,EAAE;YACnC,SAAS;gBACP,gBAAgB;gBAChB,qBAAqB;gBACrB,iBAAiB;YACnB;QACF;IACF,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC,sBAAsB;QACpC,OAAO,IAAI,SACT,KAAK,SAAS,CAAC;YAAE,OAAO;QAAiC,IACzD;YAAE,QAAQ;YAAK,SAAS;gBAAE,gBAAgB;YAAmB;QAAE;IAEnE;AACF"}}]
}